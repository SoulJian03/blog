<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>网络协议 on SoulJian小站</title><link>https://souljian.cn/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</link><description>Recent content in 网络协议 on SoulJian小站</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 22 Apr 2025 22:47:46 +0800</lastBuildDate><atom:link href="https://souljian.cn/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/index.xml" rel="self" type="application/rss+xml"/><item><title>ARP协议</title><link>https://souljian.cn/p/745333266/</link><pubDate>Tue, 22 Apr 2025 22:47:46 +0800</pubDate><guid>https://souljian.cn/p/745333266/</guid><description>&lt;h2 id="一arp协议简介">一、ARP协议简介
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>定义&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>ARP（Address Resolution Protocol，地址解析协议）是一种网络协议，用于将网络层的IP地址解析为链路层的MAC地址。&lt;/li>
&lt;li>它是网络通信的基础协议之一，确保数据能够在同一网络内部正确传输。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>工作原理&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>ARP请求&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>当主机A需要向主机B发送数据时，它会先检查自己的ARP缓存，看是否已经存储了主机B的IP地址与MAC地址的映射关系。&lt;/li>
&lt;li>如果没有找到，主机A会在本地网络中广播一个ARP请求报文，询问&amp;quot;谁拥有IP地址X？请告诉我你的MAC地址。&amp;quot;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>ARP响应&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>主机B收到ARP请求后，会发送一个ARP响应报文，告诉主机A自己的MAC地址。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>更新ARP缓存&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>主机A收到响应后，将主机B的IP地址和MAC地址的映射关系存储在自己的ARP缓存中，以便后续通信。&lt;/li>
&lt;li>ARP缓存中的条目有一定的生存时间（TTL），过期后会被删除，以避免缓存中的信息过时。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h2 id="二arp协议的作用">二、ARP协议的作用
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>IP地址与MAC地址的转换&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>IP地址是网络层的逻辑地址，用于在不同网络之间进行路由。&lt;/li>
&lt;li>MAC地址是链路层的物理地址，用于在同一网络内部进行数据传输。&lt;/li>
&lt;li>ARP协议通过将IP地址解析为MAC地址，确保数据能够在同一网络内部正确传输。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>支持网络通信&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>ARP协议是网络通信的基础协议之一，它与IP协议、TCP协议等协同工作，确保数据能够在网络中正确传输。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="三arp协议的限制">三、ARP协议的限制
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>仅限于同一网络&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>ARP协议仅适用于同一局域网内部的通信，无法跨网络工作。&lt;/li>
&lt;li>跨网络的通信需要通过路由器进行IP地址的路由。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>安全性问题&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>ARP协议本身没有加密或认证机制，容易受到ARP攻击。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="四例子解释说明">四、例子解释说明
&lt;/h2>&lt;p>假设在一个局域网中有两台主机：主机A（IP地址为192.168.1.100，MAC地址为00:11:22:33:44:55）和主机B（IP地址为192.168.1.101，MAC地址为AA:BB:CC:DD:EE:FF）。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>主机A需要向主机B发送数据&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>主机A检查自己的ARP缓存，发现没有主机B的IP地址与MAC地址的映射关系。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>主机A发送ARP请求&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>主机A在局域网中广播一个ARP请求报文：&amp;ldquo;谁拥有IP地址192.168.1.101？请告诉我你的MAC地址。&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>主机B响应ARP请求&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>主机B收到ARP请求后，发送一个ARP响应报文：&amp;ldquo;我是192.168.1.101，我的MAC地址是AA:BB:CC:DD:EE:FF。&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>主机A更新ARP缓存&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>主机A收到ARP响应后，将主机B的IP地址和MAC地址的映射关系存储在自己的ARP缓存中。&lt;/li>
&lt;li>之后，主机A就可以直接使用主机B的MAC地址发送数据了。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>DHCP协议及IP自动获取</title><link>https://souljian.cn/p/745333232/</link><pubDate>Tue, 22 Apr 2025 22:47:12 +0800</pubDate><guid>https://souljian.cn/p/745333232/</guid><description>&lt;h1 id="">
&lt;/h1>&lt;h2 id="一dhcp协议简介">一、DHCP协议简介
&lt;/h2>&lt;p>&lt;strong>采用UDP协议，67/68端口&lt;/strong>&lt;/p>
&lt;p>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议）是一种网络协议，用于自动分配IP地址和其他网络配置参数（如子网掩码、默认网关、DNS服务器地址等）。它简化了网络设备的配置过程，尤其是对于频繁接入和离开网络的设备（如笔记本电脑、手机等）。&lt;/p>
&lt;h2 id="二dhcp工作原理">二、DHCP工作原理
&lt;/h2>&lt;p>DHCP协议的工作过程主要分为以下几个阶段：&lt;/p>
&lt;h3 id="1-发现阶段discovery">1. 发现阶段（Discovery）
&lt;/h3>&lt;ul>
&lt;li>当设备（如电脑）接入网络时，它会广播一个 &lt;strong>DHCP Discover 数据包&lt;/strong>，询问网络中是否有可用的DHCP服务器。&lt;/li>
&lt;li>由于设备还不知道自己属于哪个网络，因此它会使用广播地址（如 &lt;code>255.255.255.255&lt;/code>）发送数据包。&lt;/li>
&lt;/ul>
&lt;h3 id="2-提供阶段offer">2. 提供阶段（Offer）
&lt;/h3>&lt;ul>
&lt;li>网络中的DHCP服务器收到 &lt;strong>DHCP Discover 数据包&lt;/strong> 后，会从其可用的IP地址池中选择一个未分配的IP地址，并向客户端发送一个 &lt;strong>DHCP Offer 数据包&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>DHCP Offer 数据包&lt;/strong> 中包含分配给客户端的IP地址、子网掩码、租期（IP地址的有效时间，有线默认8天，无线默认8小时）以及其他网络配置参数。&lt;/li>
&lt;/ul>
&lt;h3 id="3-请求阶段request">3. 请求阶段（Request）
&lt;/h3>&lt;ul>
&lt;li>客户端收到 &lt;strong>DHCP Offer 数据包&lt;/strong> 后，会发送一个 &lt;strong>DHCP Request 数据包&lt;/strong>，正式请求接受这个IP地址。&lt;/li>
&lt;li>如果客户端收到多个DHCP服务器的Offer（在多台DHCP服务器的环境中），它会选择一个Offer，并向所有DHCP服务器发送 &lt;strong>DHCP Request 数据包&lt;/strong>，通知其他服务器它已经选择了某个IP地址。&lt;/li>
&lt;/ul>
&lt;h3 id="4-确认阶段acknowledge">4. 确认阶段（Acknowledge）
&lt;/h3>&lt;ul>
&lt;li>DHCP服务器收到 &lt;strong>DHCP Request 数据包&lt;/strong> 后，会检查所分配的IP地址是否仍然可用。&lt;/li>
&lt;li>如果IP地址可用，服务器会发送一个 &lt;strong>DHCP Ack 数据包&lt;/strong>，正式确认分配的IP地址，并通知客户端可以使用该IP地址。&lt;/li>
&lt;li>如果IP地址已经被占用或其他问题导致无法分配，服务器会发送一个 &lt;strong>DHCP Nak 数据包&lt;/strong>，拒绝分配，并提示客户端重新请求（从第一阶段重来）。&lt;/li>
&lt;/ul>
&lt;h2 id="三dhcp的优势">三、DHCP的优势
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>自动化配置&lt;/strong>：设备接入网络后自动获取IP地址，无需手动配置，大大简化了网络管理。&lt;/li>
&lt;li>&lt;strong>避免冲突&lt;/strong>：DHCP服务器会检查IP地址是否已被占用，从而避免IP地址冲突。&lt;/li>
&lt;li>&lt;strong>集中管理&lt;/strong>：网络管理员可以通过DHCP服务器集中管理IP地址分配，方便调整网络配置。&lt;/li>
&lt;li>&lt;strong>灵活性&lt;/strong>：可以根据需要动态调整IP地址池和租期，适应不同的网络需求。&lt;/li>
&lt;/ul>
&lt;h2 id="四dhcp的局限性">四、DHCP的局限性
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>依赖服务器&lt;/strong>：如果DHCP服务器故障，新设备将无法获取IP地址。&lt;/li>
&lt;li>&lt;strong>安全性问题&lt;/strong>：未经授权的设备可能会接入网络并获取IP地址，存在安全隐患。&lt;/li>
&lt;li>&lt;strong>配置复杂性&lt;/strong>：在大型网络中，配置和管理DHCP服务器可能较为复杂。&lt;/li>
&lt;/ul>
&lt;h2 id="五dhcp的生动例子">五、DHCP的生动例子
&lt;/h2>&lt;p>假设你去参加一个大型聚会，但你不知道自己的座位在哪里。于是你开始了一段寻找座位的旅程：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>发现阶段（Discovery）&lt;/strong>
你进入聚会场地后，大声喊：&amp;ldquo;有人能告诉我我的座位在哪里吗？&amp;quot;（广播 &lt;strong>DHCP Discover 数据包&lt;/strong>）。&lt;/li>
&lt;li>&lt;strong>提供阶段（Offer）&lt;/strong>
聚会的主持人（DHCP服务器）听到你的喊声后，查看座位安排表（IP地址池），找到一个空座位，并对你说：&amp;ldquo;你可以坐那边的座位。&amp;quot;（发送 &lt;strong>DHCP Offer 数据包&lt;/strong>）。&lt;/li>
&lt;li>&lt;strong>请求阶段（Request）&lt;/strong>
你听到主持人的话后，回应说：&amp;ldquo;好的，我接受这个座位。&amp;quot;（发送 &lt;strong>DHCP Request 数据包&lt;/strong>）。&lt;/li>
&lt;li>&lt;strong>确认阶段（Acknowledge）&lt;/strong>
主持人确认你接受了座位后，正式对你说：&amp;ldquo;欢迎你坐下，这个座位是你的了。&amp;quot;（发送 &lt;strong>DHCP Ack 数据包&lt;/strong>）。&lt;/li>
&lt;/ol>
&lt;p>通过这个过程，你成功找到了自己的座位。DHCP协议的工作原理也是如此，帮助设备在复杂的网络环境中自动找到属于自己的IP地址。&lt;/p></description></item><item><title>DNS协议与域名解析</title><link>https://souljian.cn/p/745333135/</link><pubDate>Tue, 22 Apr 2025 22:45:35 +0800</pubDate><guid>https://souljian.cn/p/745333135/</guid><description>&lt;h1 id="">
&lt;/h1>&lt;h2 id="一dns协议简介">一、DNS协议简介
&lt;/h2>&lt;p>DNS（Domain Name System）即域名系统，是互联网中用于将域名转换为IP地址的协议。它解决了用户记忆IP地址的困难，使得用户可以通过易于记忆的域名来访问网络资源。&lt;/p>
&lt;h2 id="二域名解析过程">二、域名解析过程
&lt;/h2>&lt;h3 id="1-本地缓存查询">1. 本地缓存查询
&lt;/h3>&lt;p>当用户输入一个域名时，计算机首先会在本地缓存中查找是否有该域名对应的IP地址。如果找到，直接返回IP地址，无需进一步查询。&lt;/p>
&lt;h3 id="2-本地dns服务器查询">2. 本地DNS服务器查询
&lt;/h3>&lt;p>如果本地缓存中没有找到，计算机将向本地DNS服务器（通常是ISP（互联网服务提供商）提供的DNS服务器）发送查询请求。本地DNS服务器会检查自己的缓存，如果找到对应的IP地址，返回给用户；如果没有，进入下一步。&lt;/p>
&lt;h3 id="3-递归查询与迭代查询">3. 递归查询与迭代查询
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>递归查询&lt;/strong>：本地DNS服务器向其他DNS服务器查询，直到找到目标IP地址并返回给用户。用户只需等待最终结果，无需关心查询过程。&lt;/li>
&lt;li>&lt;strong>迭代查询&lt;/strong>：本地DNS服务器向其他DNS服务器发送查询请求后，返回一个指向其他DNS服务器的地址，由用户自己继续查询，直到找到目标IP地址。&lt;/li>
&lt;/ul>
&lt;h3 id="4-根域名服务器查询">4. 根域名服务器查询
&lt;/h3>&lt;p>如果本地DNS服务器无法找到目标IP地址，会向根域名服务器（如&lt;code>.com&lt;/code>、&lt;code>.org&lt;/code>等顶级域名服务器）查询。根域名服务器会返回一个指向权威DNS服务器的地址。&lt;/p>
&lt;h3 id="5-权威dns服务器查询">5. 权威DNS服务器查询
&lt;/h3>&lt;p>最终，查询请求会到达权威DNS服务器，它会返回域名对应的IP地址。&lt;/p>
&lt;h3 id="6-缓存更新">6. 缓存更新
&lt;/h3>&lt;p>查询结果会被本地DNS服务器和用户的计算机缓存起来，以便下次快速查询。&lt;/p>
&lt;h2 id="三dns协议的重要性">三、DNS协议的重要性
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>方便用户访问&lt;/strong>：用户无需记忆复杂的IP地址，只需输入域名即可访问网站。&lt;/li>
&lt;li>&lt;strong>负载均衡&lt;/strong>：通过DNS可以将流量分配到多个服务器，提高网站的可用性和性能。&lt;/li>
&lt;li>&lt;strong>故障转移&lt;/strong>：当某个服务器出现故障时，DNS可以将流量重定向到备用服务器，确保服务的连续性。&lt;/li>
&lt;/ul>
&lt;h2 id="四dns攻击">四、DNS攻击
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>DNS劫持&lt;/strong>：攻击者篡改DNS解析结果，将用户引导到恶意网站。&lt;/li>
&lt;li>&lt;strong>DNS缓存污染&lt;/strong>：攻击者向DNS缓存中注入错误的IP地址，导致用户访问错误的网站。&lt;/li>
&lt;li>&lt;strong>DDoS攻击&lt;/strong>：攻击者通过大量虚假DNS查询请求，使DNS服务器瘫痪。&lt;/li>
&lt;/ul>
&lt;h2 id="五dns解析的生动例子">五、DNS解析的生动例子
&lt;/h2>&lt;p>假设你正在寻找一家名为&amp;quot;快乐汉堡&amp;quot;的餐厅。你只知道餐厅的名字，但不知道它的具体地址。于是你开始了一段寻找之旅：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>本地缓存查询&lt;/strong>
你先问自己的朋友（&lt;strong>本地缓存&lt;/strong>）：&amp;ldquo;你知道快乐汉堡在哪里吗？&amp;ldquo;如果朋友知道，直接告诉你地址，你就直接去了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>本地DNS服务器查询&lt;/strong>
如果朋友不知道，你会去问本地的导航站（&lt;strong>本地DNS服务器&lt;/strong>）：&amp;ldquo;你知道快乐汉堡在哪里吗？&amp;ldquo;导航站会查自己的地图（缓存），如果找到了，告诉你地址；如果没有，进入下一步。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>递归查询与迭代查询&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>递归查询&lt;/strong>：导航站会帮你去问其他导航站，直到找到地址，然后告诉你。&lt;/li>
&lt;li>&lt;strong>迭代查询&lt;/strong>：导航站会告诉你去下一个导航站，你自己继续问，直到找到地址。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>根域名服务器查询&lt;/strong>
如果本地导航站也不知道，它会带你去城市的中心导航站（&lt;strong>根域名服务器&lt;/strong>），那里会告诉你去哪个区域的导航站（&lt;strong>权威DNS服务器&lt;/strong>）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>权威DNS服务器查询&lt;/strong>
最后，你到了区域导航站（&lt;strong>权威DNS服务器&lt;/strong>），它会告诉你&amp;quot;快乐汉堡&amp;quot;的具体地址。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>缓存更新&lt;/strong>
导航站会把&amp;quot;快乐汉堡&amp;quot;的地址记录下来，下次别人问的时候，可以直接告诉他们。&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>TCP三次握手和四次挥手</title><link>https://souljian.cn/p/745243663/</link><pubDate>Mon, 21 Apr 2025 21:54:23 +0800</pubDate><guid>https://souljian.cn/p/745243663/</guid><description>&lt;h3 id="-三次握手建立连接例子快递员确认收货地址">📦 &lt;strong>三次握手（建立连接）——例子：快递员确认收货地址&lt;/strong>
&lt;/h3>&lt;p>假设你的浏览器（Chrome）是寄件人，服务器（Apache）是收件人，TCP协议（运输层）是快递公司，三次握手就像快递员上门确认地址的过程：&lt;/p>
&lt;h4 id="1-第一次握手浏览器服务器">&lt;strong>1. 第一次握手（浏览器→服务器）&lt;/strong>
&lt;/h4>&lt;p>• &lt;strong>动作&lt;/strong>：
• 浏览器发送一个&lt;code>SYN=1&lt;/code>的包裹（SYN是同步序列号请求），并生成随机序号&lt;code>seq=1000&lt;/code>
• 快递员（TCP）说：&amp;ldquo;您好，我是快递员，Chrome想给Apache寄包裹，您能收吗？&amp;rdquo;
• &lt;strong>对应原图&lt;/strong>：
• 左側运输层（蓝色）→网络层→链路层→物理层，通过N1/N2路由器传递到右侧服务器&lt;/p>
&lt;h4 id="2-第二次握手服务器浏览器">&lt;strong>2. 第二次握手（服务器→浏览器）&lt;/strong>
&lt;/h4>&lt;p>• &lt;strong>动作&lt;/strong>：
• 服务器收到&lt;code>SYN&lt;/code>后，回复&lt;code>SYN=1 + ACK=1&lt;/code>，序号&lt;code>seq=2000&lt;/code>，确认号&lt;code>ack=1001&lt;/code>
• 快递员反馈：&amp;ldquo;Apache确认能收件，请把包裹按编号1001开始发给我！&amp;rdquo;
• &lt;strong>技术点&lt;/strong>：
• &lt;code>ACK=1&lt;/code>表示确认收到第一次握手
• &lt;code>ack=1001&lt;/code>表示&amp;quot;我期待收到下一个编号是1001的数据&amp;quot;&lt;/p>
&lt;h4 id="3-第三次握手浏览器服务器">&lt;strong>3. 第三次握手（浏览器→服务器）&lt;/strong>
&lt;/h4>&lt;p>• &lt;strong>动作&lt;/strong>：
• 浏览器发送&lt;code>ACK=1&lt;/code>，序号&lt;code>seq=1001&lt;/code>，确认号&lt;code>ack=2001&lt;/code>
• 快递员说：&amp;ldquo;好的，我会按您的要求开始寄送！&amp;rdquo;
• &lt;strong>对应原图&lt;/strong>：
• 运输层（蓝色）完成三次握手，应用层（橙色）正式开始传输网页数据&lt;/p>
&lt;h4 id="-为什么必须三次">💡 &lt;strong>为什么必须三次？&lt;/strong>
&lt;/h4>&lt;p>• 防止历史连接干扰：如果第一次握手的包裹卡在路由器（N1/N2）后又重复发送，服务器能通过第三次握手判断是否为过期请求
• 类似快递员必须和双方确认地址，避免寄错地方&lt;/p>
&lt;hr>
&lt;h3 id="-四次挥手断开连接例子快递员确认包裹已全部送达">✋ &lt;strong>四次挥手（断开连接）——例子：快递员确认包裹已全部送达&lt;/strong>
&lt;/h3>&lt;p>当数据传输完毕，TCP需要安全断开连接，就像快递员要确认双方都没有包裹需要寄送了：&lt;/p>
&lt;h4 id="1-第一次挥手浏览器服务器">&lt;strong>1. 第一次挥手（浏览器→服务器）&lt;/strong>
&lt;/h4>&lt;p>• &lt;strong>动作&lt;/strong>：
• 浏览器发送&lt;code>FIN=1&lt;/code>（FIN是结束标志），序号&lt;code>seq=5000&lt;/code>
• 快递员说：&amp;ldquo;Chrome的包裹都寄完了，准备收工啦！&amp;rdquo;&lt;/p>
&lt;h4 id="2-第二次挥手服务器浏览器">&lt;strong>2. 第二次挥手（服务器→浏览器）&lt;/strong>
&lt;/h4>&lt;p>• &lt;strong>动作&lt;/strong>：
• 服务器回复&lt;code>ACK=1&lt;/code>，确认号&lt;code>ack=5001&lt;/code>
• 快递员反馈：&amp;ldquo;好的，我收到你的收工通知了，但等我确认Apache还有没有包裹要寄给你&amp;rdquo;&lt;/p>
&lt;h4 id="3-第三次挥手服务器浏览器">&lt;strong>3. 第三次挥手（服务器→浏览器）&lt;/strong>
&lt;/h4>&lt;p>• &lt;strong>动作&lt;/strong>：
• 服务器发送&lt;code>FIN=1&lt;/code>，序号&lt;code>seq=8000&lt;/code>
• 快递员说：&amp;ldquo;Apache这边也没有包裹要寄了，可以收工！&amp;rdquo;&lt;/p>
&lt;h4 id="4-第四次挥手浏览器服务器">&lt;strong>4. 第四次挥手（浏览器→服务器）&lt;/strong>
&lt;/h4>&lt;p>• &lt;strong>动作&lt;/strong>：
• 浏览器回复&lt;code>ACK=1&lt;/code>，确认号&lt;code>ack=8001&lt;/code>
• 快递员确认：&amp;ldquo;双方都确认完毕，连接正式关闭！&amp;rdquo;&lt;/p>
&lt;h4 id="-为什么挥手要四次">💡 &lt;strong>为什么挥手要四次？&lt;/strong>
&lt;/h4>&lt;p>• 双向确认原则：浏览器和服务器各自独立关闭发送通道
• 第一次挥手：浏览器关闭发送 → 第二次挥手：服务器确认
• 第三次挥手：服务器关闭发送 → 第四次挥手：浏览器确认
• 类似快递员要分别确认寄件人和收件人都没有包裹了&lt;/p>
&lt;hr>
&lt;h3 id="-结合原图的分层与流程">🌐 &lt;strong>结合原图的分层与流程&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>运输层专属&lt;/strong>：三次握手和四次挥手都发生在运输层（蓝色部分），应用层（橙色）无感知&lt;/li>
&lt;li>&lt;strong>路由器N1/N2的作用&lt;/strong>：在网络层（绿色）传递握手/挥手的IP包，但不参与TCP逻辑&lt;/li>
&lt;li>&lt;strong>可靠性保障&lt;/strong>：通过序号（seq）和确认号（ack），确保数据像快递包裹一样不丢失、不重复&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="-现实场景对照">🛠️ &lt;strong>现实场景对照&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>访问网站时&lt;/strong>：
• 打开网页瞬间完成三次握手 → 传输数据 → 关闭标签页时触发四次挥手&lt;/li>
&lt;li>&lt;strong>下载大文件时&lt;/strong>：
• 握手后持续传输数据包 → 下载完成自动挥手断开&lt;/li>
&lt;li>&lt;strong>网络卡顿时&lt;/strong>：
• 握手失败会显示&amp;quot;连接超时&amp;quot;，挥手异常会导致端口长时间占用&lt;/li>
&lt;/ol>
&lt;hr></description></item><item><title>数据包解包过程</title><link>https://souljian.cn/p/745243566/</link><pubDate>Mon, 21 Apr 2025 21:52:46 +0800</pubDate><guid>https://souljian.cn/p/745243566/</guid><description>&lt;p>好的！我们结合原图用 &lt;strong>「拆快递」&lt;/strong> 的比喻来解释&lt;strong>解包过程&lt;/strong>，帮你把封包/解包的全流程对应到图中的每一层结构：&lt;/p>
&lt;hr>
&lt;h3 id="-解包过程详解对照原图的五层结构">📦 &lt;strong>解包过程详解（对照原图的五层结构）&lt;/strong>
&lt;/h3>&lt;p>假设服务器收到你从Chrome发来的数据包（封包过程见前文），现在需要&lt;strong>从物理层到应用层逐层解包&lt;/strong>：&lt;/p>
&lt;h4 id="1-物理层--数据链路层撕外层包装">&lt;strong>1. 物理层 → 数据链路层（撕外层包装）&lt;/strong>
&lt;/h4>&lt;p>• &lt;strong>动作&lt;/strong>：
• 服务器网卡收到光信号/电信号
• 将信号转换为二进制数据流（&lt;code>011010...&lt;/code>）
• &lt;strong>对应&lt;/strong>：
•物理层接收信号，传递给右侧数据链路层&lt;/p>
&lt;h4 id="2-数据链路层拆卡车运输箱">&lt;strong>2. 数据链路层（拆卡车运输箱）&lt;/strong>
&lt;/h4>&lt;p>• &lt;strong>动作&lt;/strong>：
• 检查数据帧的&lt;strong>MAC地址&lt;/strong>（类似核对卡车车牌号）
• 剥离MAC头部，发现目的地是当前服务器
• 如果MAC地址匹配，把数据包交给 网络层 ；不匹配则丢弃
• &lt;strong>对应&lt;/strong>：
• 据链路层剥离封装 → 网络层 开始工作&lt;/p>
&lt;h4 id="3-网络层拆地址分拣标签">&lt;strong>3. 网络层（拆地址分拣标签）&lt;/strong>
&lt;/h4>&lt;p>• &lt;strong>动作&lt;/strong>：
• 检查IP头部，确认目的IP是&lt;code>10.20.1.100&lt;/code>（服务器自身IP）
• 剥离IP头部，查看传输层协议类型（如TCP/UDP）
• 如果IP不匹配且服务器是路由器，会重新转发（类似快递中转站）
• &lt;strong>对应&lt;/strong>：
•网络层剥离IP封装 → 运输层处理&lt;/p>
&lt;h4 id="4-运输层拆快递小包裹">&lt;strong>4. 运输层（拆快递小包裹）&lt;/strong>
&lt;/h4>&lt;p>• &lt;strong>动作&lt;/strong>：
• TCP协议检查&lt;strong>端口号&lt;/strong>（比如目的端口&lt;code>80&lt;/code>对应Apache服务）
• 检查数据包顺序号和校验和，若丢包则要求重发（类似快递员打电话让你补发丢失的箱子）
• 重组被拆分的多个小包裹，恢复完整数据流
• &lt;strong>对应&lt;/strong>：
• 右侧运输层重组数据 → 应用层准备接收&lt;/p>
&lt;h4 id="5-应用层拆最终包裹">&lt;strong>5. 应用层（拆最终包裹）&lt;/strong>
&lt;/h4>&lt;p>• &lt;strong>动作&lt;/strong>：
• Apache服务器解析HTTP请求内容（比如&amp;quot;请给我首页HTML&amp;quot;）
• 生成响应数据（网页内容），开始反向封包过程（把包裹寄回浏览器）
• &lt;strong>对应图示&lt;/strong>：
• 右侧应用层的Apache进程处理请求，完成解包&lt;/p>
&lt;hr>
&lt;h3 id="-封包-vs-解包关键对比">🔄 &lt;strong>封包 vs 解包关键对比&lt;/strong>
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>过程&lt;/strong>&lt;/th>
&lt;th>&lt;strong>方向&lt;/strong>&lt;/th>
&lt;th>&lt;strong>典型动作&lt;/strong>&lt;/th>
&lt;th>&lt;strong>图示对应关系&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>封包&lt;/td>
&lt;td>从应用层→物理层&lt;/td>
&lt;td>逐层&lt;strong>添加头部&lt;/strong>（如IP头、TCP头）&lt;/td>
&lt;td>左側Chrome各层向下封装&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>解包&lt;/td>
&lt;td>从物理层→应用层&lt;/td>
&lt;td>逐层&lt;strong>剥离头部&lt;/strong>并校验&lt;/td>
&lt;td>右側Apache各层向上解封装&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="-解包过程中的核心技术">💡 &lt;strong>解包过程中的核心技术&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>MAC地址过滤&lt;/strong>（数据链路层）：
• 类似快递驿站只接收本小区快递，服务器会丢弃MAC地址不匹配的数据包&lt;/li>
&lt;li>&lt;strong>IP地址验证&lt;/strong>（网络层）：
• 服务器确认数据包是&amp;quot;寄给自己&amp;quot;的，否则执行转发或丢弃&lt;/li>
&lt;li>&lt;strong>端口号映射&lt;/strong>（运输层）：
• 通过目的端口&lt;code>80&lt;/code>，将数据交给Apache进程（类似快递员按门牌号送货）&lt;/li>
&lt;li>&lt;strong>数据重组&lt;/strong>（运输层）：
• 如果收到顺序错乱的包裹（如先收到编号3/3，再收到1/3），TCP会重新排序&lt;/li>
&lt;li>&lt;strong>应用协议解析&lt;/strong>（应用层）：
• Apache根据HTTP协议解析请求内容，理解用户想要什么网页&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="-结合原图的完整流程">🌐 &lt;strong>结合原图的完整流程&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>封包（Chrome→N1→N2→Apache）&lt;/strong> ：
• 左側橙色（应用层）→蓝色→绿色→青色→深绿色，经N1/N2路由器传递&lt;/li>
&lt;li>&lt;strong>解包（Apache←N2←N1←Chrome）&lt;/strong> ：
• 右側深绿色（物理层）←青色←绿色←蓝色←橙色，逆向剥离每层封装&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="-为什么分层解包重要">🛠️ &lt;strong>为什么分层解包重要？&lt;/strong>
&lt;/h3>&lt;p>• &lt;strong>错误隔离&lt;/strong>：如果物理层信号干扰（深绿色层），只需重传这一层数据，不影响上层
• &lt;strong>高效处理&lt;/strong>：网络层（绿色）快速判断IP地址，无需解析全部数据
• &lt;strong>灵活扩展&lt;/strong>：新增加密协议只需修改应用层（橙色），其他层保持不变&lt;/p>
&lt;p>下次看到网络分层图时，可以想象数据包像&lt;strong>俄罗斯套娃&lt;/strong>，每一层都包裹着更核心的数据！ 🪆&lt;/p></description></item><item><title>数据包封装过程</title><link>https://souljian.cn/p/745243535/</link><pubDate>Mon, 21 Apr 2025 21:52:15 +0800</pubDate><guid>https://souljian.cn/p/745243535/</guid><description>&lt;p>我们以 &lt;strong>10网段私有IP地址&lt;/strong> 为例（比如你家/公司内网），重新还原整个过程，重点标注源IP和目的IP：&lt;/p>
&lt;hr>
&lt;h3 id="-快递运输过程10网段ip版">📦 &lt;strong>快递运输过程（10网段IP版）&lt;/strong>
&lt;/h3>&lt;p>假设你的电脑IP是 &lt;code>10.0.0.2&lt;/code>，要访问公司内网的服务器IP &lt;code>10.20.1.100&lt;/code>，流程如下：&lt;/p>
&lt;h4 id="1-应用层对话">&lt;strong>1. 应用层（对话）&lt;/strong>
&lt;/h4>&lt;p>• &lt;strong>你的浏览器（Chrome）&lt;/strong>
• 源IP：&lt;code>10.0.0.2&lt;/code>（你的电脑）
• 目的IP：&lt;code>10.20.1.100&lt;/code>（公司服务器）
• 请求内容：&amp;ldquo;请给我首页HTML文件&amp;rdquo;（写在快递单上的文字）&lt;/p>
&lt;h4 id="2-运输层拆包贴标签">&lt;strong>2. 运输层（拆包+贴标签）&lt;/strong>
&lt;/h4>&lt;p>• &lt;strong>TCP协议处理&lt;/strong>
• 源端口：随机生成（比如&lt;code>54321&lt;/code>，你的浏览器门牌号）
• 目的端口：&lt;code>80&lt;/code>（默认HTTP服务的门牌号）
• 动作：把&amp;quot;首页请求&amp;quot;拆成多个小包裹，每个包裹标注顺序号（类似快递箱编号1/3、2/3、3/3）&lt;/p>
&lt;h4 id="3-网络层找路">&lt;strong>3. 网络层（找路）&lt;/strong>
&lt;/h4>&lt;p>• &lt;strong>路由器N1（你的网关）&lt;/strong>
• 源IP：&lt;code>10.0.0.2&lt;/code>
• 目的IP：&lt;code>10.20.1.100&lt;/code>
• 查路由表：&amp;ldquo;去往&lt;code>10.20.0.0/16&lt;/code>网段，下一跳是路由器N2（IP &lt;code>10.0.0.1&lt;/code>）&amp;rdquo;
• 类似快递分拣员：&amp;ldquo;这个包裹是10.20网段的，走3号通道到N2！&amp;rdquo;&lt;/p>
&lt;h4 id="4-数据链路层卡车运输">&lt;strong>4. 数据链路层（卡车运输）&lt;/strong>
&lt;/h4>&lt;p>• &lt;strong>从电脑到路由器N1&lt;/strong>
• 源MAC地址：&lt;code>AA:BB:CC:DD:EE:01&lt;/code>（你的电脑网卡）
• 目的MAC地址：&lt;code>AA:BB:CC:DD:EE:02&lt;/code>（路由器N1的接口）
• 动作：通过网线/WiFi传输（卡车运输）&lt;/p>
&lt;h4 id="5-物理层信号传输">&lt;strong>5. 物理层（信号传输）&lt;/strong>
&lt;/h4>&lt;p>• 网线中的电信号或WiFi的无线电波，把二进制数据流（&lt;code>01101000...&lt;/code>）从电脑传到路由器N1。&lt;/p>
&lt;hr>
&lt;h3 id="-完整路径含ip">🌐 &lt;strong>完整路径（含IP）&lt;/strong>
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">你的电脑 (10.0.0.2) → 路由器N1 → 路由器N2 → 公司服务器 (10.20.1.100)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>&lt;strong>应用层&lt;/strong>：浏览器发起请求 → 服务器返回网页&lt;/li>
&lt;li>&lt;strong>运输层&lt;/strong>：TCP通过端口（源端口）&lt;code>54321→80&lt;/code>（目标端口）保证数据顺序&lt;/li>
&lt;li>&lt;strong>网络层&lt;/strong>：IP地址（源IP）&lt;code>10.0.0.2→10.20.1.100&lt;/code>（目标IP）指引方向&lt;/li>
&lt;li>&lt;strong>数据链路层&lt;/strong>：MAC地址逐段接力传输（每经过一个路由器，源/目的MAC都会改变）&lt;/li>
&lt;li>&lt;strong>物理层&lt;/strong>：网线/WiFi承载光/电信号&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="-关键点">💡 &lt;strong>关键点&lt;/strong>
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>IP地址的作用&lt;/strong>：
• 类似快递收件地址，网络层靠IP地址决定包裹往哪送
• &lt;code>10.x.x.x&lt;/code>是私有IP（类似公司内部房间号），仅在局域网内使用&lt;/li>
&lt;li>&lt;strong>MAC地址的作用&lt;/strong>：
• 类似卡车车牌号，数据链路层靠MAC地址完成&amp;quot;最后一公里&amp;quot;配送
• 每经过一个路由器（N1→N2），MAC地址都会更新，但IP地址始终不变&lt;/li>
&lt;li>&lt;strong>为什么用10网段？&lt;/strong>
• 私有IP地址（10.0.0.0~10.255.255.255）专用于内网
• 避免和公网IP冲突，适合企业/家庭内部通信&lt;/li>
&lt;/ol></description></item></channel></rss>