<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>四次挥手 on SoulJian小站</title><link>https://souljian.cn/tags/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</link><description>Recent content in 四次挥手 on SoulJian小站</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 21 Apr 2025 21:54:23 +0800</lastBuildDate><atom:link href="https://souljian.cn/tags/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>TCP三次握手和四次挥手</title><link>https://souljian.cn/p/745243663/</link><pubDate>Mon, 21 Apr 2025 21:54:23 +0800</pubDate><guid>https://souljian.cn/p/745243663/</guid><description>&lt;h2 id="目录"&gt;目录
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a class="link" href="#tcp%e5%8d%8f%e8%ae%ae%e7%ae%80%e4%bb%8b" &gt;TCP协议简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b%e8%bf%87%e7%a8%8b" &gt;三次握手过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#%e5%9b%9b%e6%ac%a1%e6%8c%a5%e6%89%8b%e8%bf%87%e7%a8%8b" &gt;四次挥手过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#%e6%8a%80%e6%9c%af%e7%bb%86%e8%8a%82%e8%a7%a3%e6%9e%90" &gt;技术细节解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#%e5%ae%9e%e9%99%85%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af" &gt;实际应用场景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#%e5%ae%89%e5%85%a8%e6%80%a7%e8%80%83%e8%99%91" &gt;安全性考虑&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="tcp协议简介"&gt;TCP协议简介
&lt;/h2&gt;&lt;p&gt;TCP（传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。它具有以下特点：&lt;/p&gt;
&lt;p&gt;• &lt;strong&gt;面向连接&lt;/strong&gt;：通信前需要建立连接（三次握手），通信结束后需要断开连接（四次挥手）
• &lt;strong&gt;可靠传输&lt;/strong&gt;：使用确认机制和重传机制确保数据不丢失
• &lt;strong&gt;流量控制&lt;/strong&gt;：通过滑动窗口机制控制发送速率
• &lt;strong&gt;拥塞控制&lt;/strong&gt;：避免网络拥塞，动态调整传输速率&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="-三次握手过程例子快递员确认收货地址"&gt;📦 &lt;strong&gt;三次握手过程——例子：快递员确认收货地址&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;假设你的浏览器（Chrome）是寄件人，服务器（Apache）是收件人，TCP协议（运输层）是快递公司，三次握手就像快递员上门确认地址的过程：&lt;/p&gt;
&lt;h4 id="1-第一次握手浏览器服务器"&gt;&lt;strong&gt;1. 第一次握手（浏览器→服务器）&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;动作&lt;/strong&gt;：
• 浏览器发送一个&lt;code&gt;SYN=1&lt;/code&gt;的包裹（SYN是同步序列号请求），并生成随机序号&lt;code&gt;seq=1000&lt;/code&gt;
• 快递员（TCP）说：&amp;ldquo;您好，我是快递员，Chrome想给Apache寄包裹，您能收吗？&amp;rdquo;
• &lt;strong&gt;状态变化&lt;/strong&gt;：
• 客户端状态：CLOSED → SYN_SENT
• 服务端状态：LISTEN&lt;/p&gt;
&lt;h4 id="2-第二次握手服务器浏览器"&gt;&lt;strong&gt;2. 第二次握手（服务器→浏览器）&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;动作&lt;/strong&gt;：
• 服务器收到&lt;code&gt;SYN&lt;/code&gt;后，回复&lt;code&gt;SYN=1 + ACK=1&lt;/code&gt;，序号&lt;code&gt;seq=2000&lt;/code&gt;，确认号&lt;code&gt;ack=1001&lt;/code&gt;
• 快递员反馈：&amp;ldquo;Apache确认能收件，请把包裹按编号1001开始发给我！&amp;rdquo;
• &lt;strong&gt;状态变化&lt;/strong&gt;：
• 服务端状态：LISTEN → SYN_RECEIVED
• &lt;strong&gt;技术点&lt;/strong&gt;：
• &lt;code&gt;ACK=1&lt;/code&gt;表示确认收到第一次握手
• &lt;code&gt;ack=1001&lt;/code&gt;表示&amp;quot;我期待收到下一个编号是1001的数据&amp;quot;
• 确认号计算规则：收到的序号+1&lt;/p&gt;
&lt;h4 id="3-第三次握手浏览器服务器"&gt;&lt;strong&gt;3. 第三次握手（浏览器→服务器）&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;动作&lt;/strong&gt;：
• 浏览器发送&lt;code&gt;ACK=1&lt;/code&gt;，序号&lt;code&gt;seq=1001&lt;/code&gt;，确认号&lt;code&gt;ack=2001&lt;/code&gt;
• 快递员说：&amp;ldquo;好的，我会按您的要求开始寄送！&amp;rdquo;
• &lt;strong&gt;状态变化&lt;/strong&gt;：
• 客户端状态：SYN_SENT → ESTABLISHED
• 服务端状态：SYN_RECEIVED → ESTABLISHED&lt;/p&gt;
&lt;h4 id="-为什么必须三次"&gt;💡 &lt;strong&gt;为什么必须三次？&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;防止历史连接干扰&lt;/strong&gt;：如果第一次握手的包裹卡在路由器（N1/N2）后又重复发送，服务器能通过第三次握手判断是否为过期请求
• &lt;strong&gt;确保双方同步&lt;/strong&gt;：通过三次握手，双方都能确认对方的发送和接收能力
• &lt;strong&gt;避免资源浪费&lt;/strong&gt;：防止已失效的连接请求报文突然又传送到服务端，造成错误&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="-四次挥手过程例子快递员确认包裹已全部送达"&gt;✋ &lt;strong&gt;四次挥手过程——例子：快递员确认包裹已全部送达&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;当数据传输完毕，TCP需要安全断开连接，就像快递员要确认双方都没有包裹需要寄送了：&lt;/p&gt;
&lt;h4 id="1-第一次挥手浏览器服务器"&gt;&lt;strong&gt;1. 第一次挥手（浏览器→服务器）&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;动作&lt;/strong&gt;：
• 浏览器发送&lt;code&gt;FIN=1&lt;/code&gt;（FIN是结束标志），序号&lt;code&gt;seq=5000&lt;/code&gt;
• 快递员说：&amp;ldquo;Chrome的包裹都寄完了，准备收工啦！&amp;rdquo;
• &lt;strong&gt;状态变化&lt;/strong&gt;：
• 客户端状态：ESTABLISHED → FIN_WAIT_1&lt;/p&gt;
&lt;h4 id="2-第二次挥手服务器浏览器"&gt;&lt;strong&gt;2. 第二次挥手（服务器→浏览器）&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;动作&lt;/strong&gt;：
• 服务器回复&lt;code&gt;ACK=1&lt;/code&gt;，确认号&lt;code&gt;ack=5001&lt;/code&gt;
• 快递员反馈：&amp;ldquo;好的，我收到你的收工通知了，但等我确认Apache还有没有包裹要寄给你&amp;rdquo;
• &lt;strong&gt;状态变化&lt;/strong&gt;：
• 服务端状态：ESTABLISHED → CLOSE_WAIT
• 客户端状态：FIN_WAIT_1 → FIN_WAIT_2&lt;/p&gt;
&lt;h4 id="3-第三次挥手服务器浏览器"&gt;&lt;strong&gt;3. 第三次挥手（服务器→浏览器）&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;动作&lt;/strong&gt;：
• 服务器发送&lt;code&gt;FIN=1&lt;/code&gt;，序号&lt;code&gt;seq=8000&lt;/code&gt;
• 快递员说：&amp;ldquo;Apache这边也没有包裹要寄了，可以收工！&amp;rdquo;
• &lt;strong&gt;状态变化&lt;/strong&gt;：
• 服务端状态：CLOSE_WAIT → LAST_ACK&lt;/p&gt;
&lt;h4 id="4-第四次挥手浏览器服务器"&gt;&lt;strong&gt;4. 第四次挥手（浏览器→服务器）&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;动作&lt;/strong&gt;：
• 浏览器回复&lt;code&gt;ACK=1&lt;/code&gt;，确认号&lt;code&gt;ack=8001&lt;/code&gt;
• 快递员确认：&amp;ldquo;双方都确认完毕，连接正式关闭！&amp;rdquo;
• &lt;strong&gt;状态变化&lt;/strong&gt;：
• 客户端状态：FIN_WAIT_2 → TIME_WAIT → CLOSED
• 服务端状态：LAST_ACK → CLOSED&lt;/p&gt;
&lt;h4 id="-为什么挥手要四次"&gt;💡 &lt;strong&gt;为什么挥手要四次？&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;双向关闭原则&lt;/strong&gt;：TCP是全双工通信，每个方向都需要单独关闭
• 第一次挥手：客户端关闭发送通道
• 第二次挥手：服务端确认客户端的关闭请求
• 第三次挥手：服务端关闭发送通道
• 第四次挥手：客户端确认服务端的关闭请求
• &lt;strong&gt;数据完整性保证&lt;/strong&gt;：确保双方的数据都能完整传输，不会因为一方提前关闭而丢失数据&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="-技术细节解析"&gt;🔧 &lt;strong&gt;技术细节解析&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id="tcp标志位说明"&gt;&lt;strong&gt;TCP标志位说明&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;SYN（同步序列号）&lt;/strong&gt;：用于建立连接时同步序列号
• &lt;strong&gt;ACK（确认标志）&lt;/strong&gt;：表示确认号字段有效
• &lt;strong&gt;FIN（结束标志）&lt;/strong&gt;：用于释放连接
• &lt;strong&gt;RST（重置连接）&lt;/strong&gt;：用于异常终止连接
• &lt;strong&gt;PSH（推送标志）&lt;/strong&gt;：接收方应尽快将这个报文段交给应用层
• &lt;strong&gt;URG（紧急标志）&lt;/strong&gt;：表示紧急指针字段有效&lt;/p&gt;
&lt;h4 id="序列号与确认号"&gt;&lt;strong&gt;序列号与确认号&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;序列号（seq）&lt;/strong&gt;：
• 用于标识从TCP源端向目的端发送的字节流
• 初始序列号（ISN）是随机生成的
• &lt;strong&gt;确认号（ack）&lt;/strong&gt;：
• 期望收到对方下一个报文段的第一个数据字节的序号
• 计算方式：收到的序列号 + 1&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="-实际应用场景"&gt;🌐 &lt;strong&gt;实际应用场景&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id="1-网页浏览"&gt;&lt;strong&gt;1. 网页浏览&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;场景描述&lt;/strong&gt;：
• 打开网页时自动完成三次握手
• 数据传输过程中保持连接
• 关闭标签页时触发四次挥手
• &lt;strong&gt;注意事项&lt;/strong&gt;：
• 现代浏览器通常使用HTTP长连接（Keep-Alive）
• 一个TCP连接可以复用于多个HTTP请求&lt;/p&gt;
&lt;h4 id="2-文件下载"&gt;&lt;strong&gt;2. 文件下载&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;特点&lt;/strong&gt;：
• 建立连接后持续传输大量数据
• 支持断点续传（基于序列号机制）
• &lt;strong&gt;优化建议&lt;/strong&gt;：
• 适当增大TCP窗口大小
• 启用TCP快速重传机制&lt;/p&gt;
&lt;h4 id="3-实时通信"&gt;&lt;strong&gt;3. 实时通信&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;应用场景&lt;/strong&gt;：
• 即时通讯
• 在线游戏
• 视频会议
• &lt;strong&gt;性能考虑&lt;/strong&gt;：
• 需要低延迟
• 可能需要配置TCP_NODELAY选项&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="-安全性考虑"&gt;🛡️ &lt;strong&gt;安全性考虑&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id="1-syn洪泛攻击"&gt;&lt;strong&gt;1. SYN洪泛攻击&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;攻击原理&lt;/strong&gt;：
• 攻击者发送大量SYN请求但不完成三次握手
• 服务器为每个请求分配资源，最终耗尽资源
• &lt;strong&gt;防护措施&lt;/strong&gt;：
• 启用SYN Cookie
• 增大半连接队列
• 设置合理的超时时间&lt;/p&gt;
&lt;h4 id="2-tcp重置攻击"&gt;&lt;strong&gt;2. TCP重置攻击&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;攻击原理&lt;/strong&gt;：
• 攻击者伪造RST包中断正常连接
• &lt;strong&gt;防护措施&lt;/strong&gt;：
• 启用TCP MD5认证
• 使用IPSec保护TCP连接&lt;/p&gt;
&lt;h4 id="3-连接耗尽攻击"&gt;&lt;strong&gt;3. 连接耗尽攻击&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;攻击原理&lt;/strong&gt;：
• 建立大量TCP连接但不释放
• &lt;strong&gt;防护措施&lt;/strong&gt;：
• 限制单IP的最大连接数
• 启用连接超时机制&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="-常见问题与解决方案"&gt;🔍 &lt;strong&gt;常见问题与解决方案&lt;/strong&gt;
&lt;/h3&gt;&lt;h4 id="1-连接建立失败"&gt;&lt;strong&gt;1. 连接建立失败&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;可能原因&lt;/strong&gt;：
• 网络不通
• 服务端端口未开放
• 防火墙拦截
• &lt;strong&gt;解决方案&lt;/strong&gt;：
• 检查网络连通性
• 确认服务状态
• 检查防火墙规则&lt;/p&gt;
&lt;h4 id="2-连接无法释放"&gt;&lt;strong&gt;2. 连接无法释放&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;可能原因&lt;/strong&gt;：
• TIME_WAIT状态积累
• 程序未正确关闭连接
• &lt;strong&gt;解决方案&lt;/strong&gt;：
• 调整TCP参数（tcp_tw_reuse）
• 优化程序代码，确保正确关闭连接&lt;/p&gt;
&lt;h4 id="3-性能问题"&gt;&lt;strong&gt;3. 性能问题&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;• &lt;strong&gt;表现&lt;/strong&gt;：
• 连接建立慢
• 数据传输延迟大
• &lt;strong&gt;优化方案&lt;/strong&gt;：
• 使用TCP Fast Open
• 调整TCP缓冲区大小
• 优化网络路由&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="-延伸阅读"&gt;📚 &lt;strong&gt;延伸阅读&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;TCP状态转换&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP流量控制&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP拥塞控制&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP keepalive机制&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP安全加固最佳实践&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;</description></item></channel></rss>